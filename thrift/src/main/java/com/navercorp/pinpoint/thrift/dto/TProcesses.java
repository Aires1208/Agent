/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.navercorp.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-16")
public class TProcesses implements org.apache.thrift.TBase<TProcesses, TProcesses._Fields>, java.io.Serializable, Cloneable, Comparable<TProcesses> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TProcesses");

  private static final org.apache.thrift.protocol.TField T_PROCESSES_CPU_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("tProcessesCpuUsage", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField T_PROCESSES_CPU_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("tProcessesCpuTime", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField T_PROCESSES_VIRT_FIELD_DESC = new org.apache.thrift.protocol.TField("tProcessesVirt", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TProcessesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TProcessesTupleSchemeFactory());
  }

  private List<TProcessInfo> tProcessesCpuUsage; // required
  private List<TProcessInfo> tProcessesCpuTime; // required
  private List<TProcessInfo> tProcessesVirt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    T_PROCESSES_CPU_USAGE((short)1, "tProcessesCpuUsage"),
    T_PROCESSES_CPU_TIME((short)2, "tProcessesCpuTime"),
    T_PROCESSES_VIRT((short)3, "tProcessesVirt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // T_PROCESSES_CPU_USAGE
          return T_PROCESSES_CPU_USAGE;
        case 2: // T_PROCESSES_CPU_TIME
          return T_PROCESSES_CPU_TIME;
        case 3: // T_PROCESSES_VIRT
          return T_PROCESSES_VIRT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.T_PROCESSES_CPU_USAGE, new org.apache.thrift.meta_data.FieldMetaData("tProcessesCpuUsage", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProcessInfo.class))));
    tmpMap.put(_Fields.T_PROCESSES_CPU_TIME, new org.apache.thrift.meta_data.FieldMetaData("tProcessesCpuTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProcessInfo.class))));
    tmpMap.put(_Fields.T_PROCESSES_VIRT, new org.apache.thrift.meta_data.FieldMetaData("tProcessesVirt", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProcessInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TProcesses.class, metaDataMap);
  }

  public TProcesses() {
  }

  public TProcesses(
          List<TProcessInfo> tProcessesCpuUsage,
          List<TProcessInfo> tProcessesCpuTime,
          List<TProcessInfo> tProcessesVirt)
  {
    this();
    this.tProcessesCpuUsage = tProcessesCpuUsage;
    this.tProcessesCpuTime = tProcessesCpuTime;
    this.tProcessesVirt = tProcessesVirt;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TProcesses(TProcesses other) {
    if (other.isSetTProcessesCpuUsage()) {
      List<TProcessInfo> __this__tProcessesCpuUsage = new ArrayList<TProcessInfo>(other.tProcessesCpuUsage.size());
      for (TProcessInfo other_element : other.tProcessesCpuUsage) {
        __this__tProcessesCpuUsage.add(new TProcessInfo(other_element));
      }
      this.tProcessesCpuUsage = __this__tProcessesCpuUsage;
    }
    if (other.isSetTProcessesCpuTime()) {
      List<TProcessInfo> __this__tProcessesCpuTime = new ArrayList<TProcessInfo>(other.tProcessesCpuTime.size());
      for (TProcessInfo other_element : other.tProcessesCpuTime) {
        __this__tProcessesCpuTime.add(new TProcessInfo(other_element));
      }
      this.tProcessesCpuTime = __this__tProcessesCpuTime;
    }
    if (other.isSetTProcessesVirt()) {
      List<TProcessInfo> __this__tProcessesVirt = new ArrayList<TProcessInfo>(other.tProcessesVirt.size());
      for (TProcessInfo other_element : other.tProcessesVirt) {
        __this__tProcessesVirt.add(new TProcessInfo(other_element));
      }
      this.tProcessesVirt = __this__tProcessesVirt;
    }
  }

  public TProcesses deepCopy() {
    return new TProcesses(this);
  }

  @Override
  public void clear() {
    this.tProcessesCpuUsage = null;
    this.tProcessesCpuTime = null;
    this.tProcessesVirt = null;
  }

  public int getTProcessesCpuUsageSize() {
    return (this.tProcessesCpuUsage == null) ? 0 : this.tProcessesCpuUsage.size();
  }

  public java.util.Iterator<TProcessInfo> getTProcessesCpuUsageIterator() {
    return (this.tProcessesCpuUsage == null) ? null : this.tProcessesCpuUsage.iterator();
  }

  public void addToTProcessesCpuUsage(TProcessInfo elem) {
    if (this.tProcessesCpuUsage == null) {
      this.tProcessesCpuUsage = new ArrayList<TProcessInfo>();
    }
    this.tProcessesCpuUsage.add(elem);
  }

  public List<TProcessInfo> getTProcessesCpuUsage() {
    return this.tProcessesCpuUsage;
  }

  public void setTProcessesCpuUsage(List<TProcessInfo> tProcessesCpuUsage) {
    this.tProcessesCpuUsage = tProcessesCpuUsage;
  }

  public void unsetTProcessesCpuUsage() {
    this.tProcessesCpuUsage = null;
  }

  /** Returns true if field tProcessesCpuUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetTProcessesCpuUsage() {
    return this.tProcessesCpuUsage != null;
  }

  public void setTProcessesCpuUsageIsSet(boolean value) {
    if (!value) {
      this.tProcessesCpuUsage = null;
    }
  }

  public int getTProcessesCpuTimeSize() {
    return (this.tProcessesCpuTime == null) ? 0 : this.tProcessesCpuTime.size();
  }

  public java.util.Iterator<TProcessInfo> getTProcessesCpuTimeIterator() {
    return (this.tProcessesCpuTime == null) ? null : this.tProcessesCpuTime.iterator();
  }

  public void addToTProcessesCpuTime(TProcessInfo elem) {
    if (this.tProcessesCpuTime == null) {
      this.tProcessesCpuTime = new ArrayList<TProcessInfo>();
    }
    this.tProcessesCpuTime.add(elem);
  }

  public List<TProcessInfo> getTProcessesCpuTime() {
    return this.tProcessesCpuTime;
  }

  public void setTProcessesCpuTime(List<TProcessInfo> tProcessesCpuTime) {
    this.tProcessesCpuTime = tProcessesCpuTime;
  }

  public void unsetTProcessesCpuTime() {
    this.tProcessesCpuTime = null;
  }

  /** Returns true if field tProcessesCpuTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTProcessesCpuTime() {
    return this.tProcessesCpuTime != null;
  }

  public void setTProcessesCpuTimeIsSet(boolean value) {
    if (!value) {
      this.tProcessesCpuTime = null;
    }
  }

  public int getTProcessesVirtSize() {
    return (this.tProcessesVirt == null) ? 0 : this.tProcessesVirt.size();
  }

  public java.util.Iterator<TProcessInfo> getTProcessesVirtIterator() {
    return (this.tProcessesVirt == null) ? null : this.tProcessesVirt.iterator();
  }

  public void addToTProcessesVirt(TProcessInfo elem) {
    if (this.tProcessesVirt == null) {
      this.tProcessesVirt = new ArrayList<TProcessInfo>();
    }
    this.tProcessesVirt.add(elem);
  }

  public List<TProcessInfo> getTProcessesVirt() {
    return this.tProcessesVirt;
  }

  public void setTProcessesVirt(List<TProcessInfo> tProcessesVirt) {
    this.tProcessesVirt = tProcessesVirt;
  }

  public void unsetTProcessesVirt() {
    this.tProcessesVirt = null;
  }

  /** Returns true if field tProcessesVirt is set (has been assigned a value) and false otherwise */
  public boolean isSetTProcessesVirt() {
    return this.tProcessesVirt != null;
  }

  public void setTProcessesVirtIsSet(boolean value) {
    if (!value) {
      this.tProcessesVirt = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
      case T_PROCESSES_CPU_USAGE:
        if (value == null) {
          unsetTProcessesCpuUsage();
        } else {
          setTProcessesCpuUsage((List<TProcessInfo>)value);
        }
        break;

      case T_PROCESSES_CPU_TIME:
        if (value == null) {
          unsetTProcessesCpuTime();
        } else {
          setTProcessesCpuTime((List<TProcessInfo>)value);
        }
        break;

      case T_PROCESSES_VIRT:
        if (value == null) {
          unsetTProcessesVirt();
        } else {
          setTProcessesVirt((List<TProcessInfo>)value);
        }
        break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
      case T_PROCESSES_CPU_USAGE:
        return getTProcessesCpuUsage();

      case T_PROCESSES_CPU_TIME:
        return getTProcessesCpuTime();

      case T_PROCESSES_VIRT:
        return getTProcessesVirt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
      case T_PROCESSES_CPU_USAGE:
        return isSetTProcessesCpuUsage();
      case T_PROCESSES_CPU_TIME:
        return isSetTProcessesCpuTime();
      case T_PROCESSES_VIRT:
        return isSetTProcessesVirt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TProcesses)
      return this.equals((TProcesses)that);
    return false;
  }

  public boolean equals(TProcesses that) {
    if (that == null)
      return false;

    boolean this_present_tProcessesCpuUsage = true && this.isSetTProcessesCpuUsage();
    boolean that_present_tProcessesCpuUsage = true && that.isSetTProcessesCpuUsage();
    if (this_present_tProcessesCpuUsage || that_present_tProcessesCpuUsage) {
      if (!(this_present_tProcessesCpuUsage && that_present_tProcessesCpuUsage))
        return false;
      if (!this.tProcessesCpuUsage.equals(that.tProcessesCpuUsage))
        return false;
    }

    boolean this_present_tProcessesCpuTime = true && this.isSetTProcessesCpuTime();
    boolean that_present_tProcessesCpuTime = true && that.isSetTProcessesCpuTime();
    if (this_present_tProcessesCpuTime || that_present_tProcessesCpuTime) {
      if (!(this_present_tProcessesCpuTime && that_present_tProcessesCpuTime))
        return false;
      if (!this.tProcessesCpuTime.equals(that.tProcessesCpuTime))
        return false;
    }

    boolean this_present_tProcessesVirt = true && this.isSetTProcessesVirt();
    boolean that_present_tProcessesVirt = true && that.isSetTProcessesVirt();
    if (this_present_tProcessesVirt || that_present_tProcessesVirt) {
      if (!(this_present_tProcessesVirt && that_present_tProcessesVirt))
        return false;
      if (!this.tProcessesVirt.equals(that.tProcessesVirt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tProcessesCpuUsage = true && (isSetTProcessesCpuUsage());
    list.add(present_tProcessesCpuUsage);
    if (present_tProcessesCpuUsage)
      list.add(tProcessesCpuUsage);

    boolean present_tProcessesCpuTime = true && (isSetTProcessesCpuTime());
    list.add(present_tProcessesCpuTime);
    if (present_tProcessesCpuTime)
      list.add(tProcessesCpuTime);

    boolean present_tProcessesVirt = true && (isSetTProcessesVirt());
    list.add(present_tProcessesVirt);
    if (present_tProcessesVirt)
      list.add(tProcessesVirt);

    return list.hashCode();
  }

  @Override
  public int compareTo(TProcesses other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTProcessesCpuUsage()).compareTo(other.isSetTProcessesCpuUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTProcessesCpuUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tProcessesCpuUsage, other.tProcessesCpuUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTProcessesCpuTime()).compareTo(other.isSetTProcessesCpuTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTProcessesCpuTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tProcessesCpuTime, other.tProcessesCpuTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTProcessesVirt()).compareTo(other.isSetTProcessesVirt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTProcessesVirt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tProcessesVirt, other.tProcessesVirt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TProcesses(");
    boolean first = true;

    sb.append("tProcessesCpuUsage:");
    if (this.tProcessesCpuUsage == null) {
      sb.append("null");
    } else {
      sb.append(this.tProcessesCpuUsage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tProcessesCpuTime:");
    if (this.tProcessesCpuTime == null) {
      sb.append("null");
    } else {
      sb.append(this.tProcessesCpuTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tProcessesVirt:");
    if (this.tProcessesVirt == null) {
      sb.append("null");
    } else {
      sb.append(this.tProcessesVirt);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TProcessesStandardSchemeFactory implements SchemeFactory {
    public TProcessesStandardScheme getScheme() {
      return new TProcessesStandardScheme();
    }
  }

  private static class TProcessesStandardScheme extends StandardScheme<TProcesses> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TProcesses struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // T_PROCESSES_CPU_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.tProcessesCpuUsage = new ArrayList<TProcessInfo>(_list72.size);
                TProcessInfo _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = new TProcessInfo();
                  _elem73.read(iprot);
                  struct.tProcessesCpuUsage.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setTProcessesCpuUsageIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // T_PROCESSES_CPU_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
                struct.tProcessesCpuTime = new ArrayList<TProcessInfo>(_list75.size);
                TProcessInfo _elem76;
                for (int _i77 = 0; _i77 < _list75.size; ++_i77)
                {
                  _elem76 = new TProcessInfo();
                  _elem76.read(iprot);
                  struct.tProcessesCpuTime.add(_elem76);
                }
                iprot.readListEnd();
              }
              struct.setTProcessesCpuTimeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // T_PROCESSES_VIRT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list78 = iprot.readListBegin();
                struct.tProcessesVirt = new ArrayList<TProcessInfo>(_list78.size);
                TProcessInfo _elem79;
                for (int _i80 = 0; _i80 < _list78.size; ++_i80)
                {
                  _elem79 = new TProcessInfo();
                  _elem79.read(iprot);
                  struct.tProcessesVirt.add(_elem79);
                }
                iprot.readListEnd();
              }
              struct.setTProcessesVirtIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TProcesses struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tProcessesCpuUsage != null) {
        oprot.writeFieldBegin(T_PROCESSES_CPU_USAGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tProcessesCpuUsage.size()));
          for (TProcessInfo _iter81 : struct.tProcessesCpuUsage)
          {
            _iter81.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tProcessesCpuTime != null) {
        oprot.writeFieldBegin(T_PROCESSES_CPU_TIME_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tProcessesCpuTime.size()));
          for (TProcessInfo _iter82 : struct.tProcessesCpuTime)
          {
            _iter82.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tProcessesVirt != null) {
        oprot.writeFieldBegin(T_PROCESSES_VIRT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tProcessesVirt.size()));
          for (TProcessInfo _iter83 : struct.tProcessesVirt)
          {
            _iter83.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TProcessesTupleSchemeFactory implements SchemeFactory {
    public TProcessesTupleScheme getScheme() {
      return new TProcessesTupleScheme();
    }
  }

  private static class TProcessesTupleScheme extends TupleScheme<TProcesses> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TProcesses struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTProcessesCpuUsage()) {
        optionals.set(0);
      }
      if (struct.isSetTProcessesCpuTime()) {
        optionals.set(1);
      }
      if (struct.isSetTProcessesVirt()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTProcessesCpuUsage()) {
        {
          oprot.writeI32(struct.tProcessesCpuUsage.size());
          for (TProcessInfo _iter84 : struct.tProcessesCpuUsage)
          {
            _iter84.write(oprot);
          }
        }
      }
      if (struct.isSetTProcessesCpuTime()) {
        {
          oprot.writeI32(struct.tProcessesCpuTime.size());
          for (TProcessInfo _iter85 : struct.tProcessesCpuTime)
          {
            _iter85.write(oprot);
          }
        }
      }
      if (struct.isSetTProcessesVirt()) {
        {
          oprot.writeI32(struct.tProcessesVirt.size());
          for (TProcessInfo _iter86 : struct.tProcessesVirt)
          {
            _iter86.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TProcesses struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tProcessesCpuUsage = new ArrayList<TProcessInfo>(_list87.size);
          TProcessInfo _elem88;
          for (int _i89 = 0; _i89 < _list87.size; ++_i89)
          {
            _elem88 = new TProcessInfo();
            _elem88.read(iprot);
            struct.tProcessesCpuUsage.add(_elem88);
          }
        }
        struct.setTProcessesCpuUsageIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list90 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tProcessesCpuTime = new ArrayList<TProcessInfo>(_list90.size);
          TProcessInfo _elem91;
          for (int _i92 = 0; _i92 < _list90.size; ++_i92)
          {
            _elem91 = new TProcessInfo();
            _elem91.read(iprot);
            struct.tProcessesCpuTime.add(_elem91);
          }
        }
        struct.setTProcessesCpuTimeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tProcessesVirt = new ArrayList<TProcessInfo>(_list93.size);
          TProcessInfo _elem94;
          for (int _i95 = 0; _i95 < _list93.size; ++_i95)
          {
            _elem94 = new TProcessInfo();
            _elem94.read(iprot);
            struct.tProcessesVirt.add(_elem94);
          }
        }
        struct.setTProcessesVirtIsSet(true);
      }
    }
  }

}

