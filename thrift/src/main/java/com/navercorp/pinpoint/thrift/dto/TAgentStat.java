/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.navercorp.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-16")
public class TAgentStat implements org.apache.thrift.TBase<TAgentStat, TAgentStat._Fields>, java.io.Serializable, Cloneable, Comparable<TAgentStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAgentStat");

  private static final org.apache.thrift.protocol.TField AGENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("agentId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimestamp", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COLLECT_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("collectInterval", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField GC_FIELD_DESC = new org.apache.thrift.protocol.TField("gc", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField CPU_LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuLoad", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField IOLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("IOLoad", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField NET_LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("netLoad", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField MEM_LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("memLoad", org.apache.thrift.protocol.TType.STRUCT, (short)23);
  private static final org.apache.thrift.protocol.TField MEM_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("memInfo", org.apache.thrift.protocol.TType.STRUCT, (short)24);
  private static final org.apache.thrift.protocol.TField DEVICES_FIELD_DESC = new org.apache.thrift.protocol.TField("devices", org.apache.thrift.protocol.TType.STRUCT, (short)25);
  private static final org.apache.thrift.protocol.TField FILE_SYSTEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSystems", org.apache.thrift.protocol.TType.STRUCT, (short)26);
  private static final org.apache.thrift.protocol.TField NETS_FIELD_DESC = new org.apache.thrift.protocol.TField("nets", org.apache.thrift.protocol.TType.STRUCT, (short)27);
  private static final org.apache.thrift.protocol.TField CPUS_FIELD_DESC = new org.apache.thrift.protocol.TField("cpus", org.apache.thrift.protocol.TType.STRUCT, (short)28);
  private static final org.apache.thrift.protocol.TField PROCESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("processes", org.apache.thrift.protocol.TType.STRUCT, (short)29);
  private static final org.apache.thrift.protocol.TField TRANSACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("transaction", org.apache.thrift.protocol.TType.STRUCT, (short)30);
  private static final org.apache.thrift.protocol.TField ACTIVE_TRACE_FIELD_DESC = new org.apache.thrift.protocol.TField("activeTrace", org.apache.thrift.protocol.TType.STRUCT, (short)40);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRING, (short)200);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAgentStatStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAgentStatTupleSchemeFactory());
  }

  private String agentId; // optional
  private long startTimestamp; // optional
  private long timestamp; // optional
  private long collectInterval; // optional
  private TJvmGc gc; // optional
  private TCpuLoad cpuLoad; // optional
  private TIOLoad IOLoad; // optional
  private TNetLoad netLoad; // optional
  private TMemLoad memLoad; // optional
  private TMemInfo memInfo; // optional
  private TDevices devices; // optional
  private TFileSystems fileSystems; // optional
  private TNets nets; // optional
  private TCpus cpus; // optional
  private TProcesses processes; // optional
  private TTransaction transaction; // optional
  private TActiveTrace activeTrace; // optional
  private String metadata; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGENT_ID((short)1, "agentId"),
    START_TIMESTAMP((short)2, "startTimestamp"),
    TIMESTAMP((short)3, "timestamp"),
    COLLECT_INTERVAL((short)4, "collectInterval"),
    GC((short)10, "gc"),
    CPU_LOAD((short)20, "cpuLoad"),
    IOLOAD((short)21, "IOLoad"),
    NET_LOAD((short)22, "netLoad"),
    MEM_LOAD((short)23, "memLoad"),
    MEM_INFO((short)24, "memInfo"),
    DEVICES((short)25, "devices"),
    FILE_SYSTEMS((short)26, "fileSystems"),
    NETS((short)27, "nets"),
    CPUS((short)28, "cpus"),
    PROCESSES((short)29, "processes"),
    TRANSACTION((short)30, "transaction"),
    ACTIVE_TRACE((short)40, "activeTrace"),
    METADATA((short)200, "metadata");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGENT_ID
          return AGENT_ID;
        case 2: // START_TIMESTAMP
          return START_TIMESTAMP;
        case 3: // TIMESTAMP
          return TIMESTAMP;
        case 4: // COLLECT_INTERVAL
          return COLLECT_INTERVAL;
        case 10: // GC
          return GC;
        case 20: // CPU_LOAD
          return CPU_LOAD;
        case 21: // IOLOAD
          return IOLOAD;
        case 22: // NET_LOAD
          return NET_LOAD;
        case 23: // MEM_LOAD
          return MEM_LOAD;
        case 24: // MEM_INFO
          return MEM_INFO;
        case 25: // DEVICES
          return DEVICES;
        case 26: // FILE_SYSTEMS
          return FILE_SYSTEMS;
        case 27: // NETS
          return NETS;
        case 28: // CPUS
          return CPUS;
        case 29: // PROCESSES
          return PROCESSES;
        case 30: // TRANSACTION
          return TRANSACTION;
        case 40: // ACTIVE_TRACE
          return ACTIVE_TRACE;
        case 200: // METADATA
          return METADATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTTIMESTAMP_ISSET_ID = 0;
  private static final int __TIMESTAMP_ISSET_ID = 1;
  private static final int __COLLECTINTERVAL_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.AGENT_ID,_Fields.START_TIMESTAMP,_Fields.TIMESTAMP,_Fields.COLLECT_INTERVAL,_Fields.GC,_Fields.CPU_LOAD,_Fields.IOLOAD,_Fields.NET_LOAD,_Fields.MEM_LOAD,_Fields.MEM_INFO,_Fields.DEVICES,_Fields.FILE_SYSTEMS,_Fields.NETS,_Fields.CPUS,_Fields.PROCESSES,_Fields.TRANSACTION,_Fields.ACTIVE_TRACE,_Fields.METADATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGENT_ID, new org.apache.thrift.meta_data.FieldMetaData("agentId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("startTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COLLECT_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("collectInterval", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GC, new org.apache.thrift.meta_data.FieldMetaData("gc", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TJvmGc.class)));
    tmpMap.put(_Fields.CPU_LOAD, new org.apache.thrift.meta_data.FieldMetaData("cpuLoad", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCpuLoad.class)));
    tmpMap.put(_Fields.IOLOAD, new org.apache.thrift.meta_data.FieldMetaData("IOLoad", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIOLoad.class)));
    tmpMap.put(_Fields.NET_LOAD, new org.apache.thrift.meta_data.FieldMetaData("netLoad", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNetLoad.class)));
    tmpMap.put(_Fields.MEM_LOAD, new org.apache.thrift.meta_data.FieldMetaData("memLoad", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMemLoad.class)));
    tmpMap.put(_Fields.MEM_INFO, new org.apache.thrift.meta_data.FieldMetaData("memInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMemInfo.class)));
    tmpMap.put(_Fields.DEVICES, new org.apache.thrift.meta_data.FieldMetaData("devices", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDevices.class)));
    tmpMap.put(_Fields.FILE_SYSTEMS, new org.apache.thrift.meta_data.FieldMetaData("fileSystems", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFileSystems.class)));
    tmpMap.put(_Fields.NETS, new org.apache.thrift.meta_data.FieldMetaData("nets", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNets.class)));
    tmpMap.put(_Fields.CPUS, new org.apache.thrift.meta_data.FieldMetaData("cpus", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCpus.class)));
    tmpMap.put(_Fields.PROCESSES, new org.apache.thrift.meta_data.FieldMetaData("processes", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProcesses.class)));
    tmpMap.put(_Fields.TRANSACTION, new org.apache.thrift.meta_data.FieldMetaData("transaction", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTransaction.class)));
    tmpMap.put(_Fields.ACTIVE_TRACE, new org.apache.thrift.meta_data.FieldMetaData("activeTrace", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TActiveTrace.class)));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAgentStat.class, metaDataMap);
  }

  public TAgentStat() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAgentStat(TAgentStat other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAgentId()) {
      this.agentId = other.agentId;
    }
    this.startTimestamp = other.startTimestamp;
    this.timestamp = other.timestamp;
    this.collectInterval = other.collectInterval;
    if (other.isSetGc()) {
      this.gc = new TJvmGc(other.gc);
    }
    if (other.isSetCpuLoad()) {
      this.cpuLoad = new TCpuLoad(other.cpuLoad);
    }
    if (other.isSetIOLoad()) {
      this.IOLoad = new TIOLoad(other.IOLoad);
    }
    if (other.isSetNetLoad()) {
      this.netLoad = new TNetLoad(other.netLoad);
    }
    if (other.isSetMemLoad()) {
      this.memLoad = new TMemLoad(other.memLoad);
    }
    if (other.isSetMemInfo()) {
      this.memInfo = new TMemInfo(other.memInfo);
    }
    if (other.isSetDevices()) {
      this.devices = new TDevices(other.devices);
    }
    if (other.isSetFileSystems()) {
      this.fileSystems = new TFileSystems(other.fileSystems);
    }
    if (other.isSetNets()) {
      this.nets = new TNets(other.nets);
    }
    if (other.isSetCpus()) {
      this.cpus = new TCpus(other.cpus);
    }
    if (other.isSetProcesses()) {
      this.processes = new TProcesses(other.processes);
    }
    if (other.isSetTransaction()) {
      this.transaction = new TTransaction(other.transaction);
    }
    if (other.isSetActiveTrace()) {
      this.activeTrace = new TActiveTrace(other.activeTrace);
    }
    if (other.isSetMetadata()) {
      this.metadata = other.metadata;
    }
  }

  public TAgentStat deepCopy() {
    return new TAgentStat(this);
  }

  @Override
  public void clear() {
    this.agentId = null;
    setStartTimestampIsSet(false);
    this.startTimestamp = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setCollectIntervalIsSet(false);
    this.collectInterval = 0;
    this.gc = null;
    this.cpuLoad = null;
    this.IOLoad = null;
    this.netLoad = null;
    this.memLoad = null;
    this.memInfo = null;
    this.devices = null;
    this.fileSystems = null;
    this.nets = null;
    this.cpus = null;
    this.processes = null;
    this.transaction = null;
    this.activeTrace = null;
    this.metadata = null;
  }

  public String getAgentId() {
    return this.agentId;
  }

  public void setAgentId(String agentId) {
    this.agentId = agentId;
  }

  public void unsetAgentId() {
    this.agentId = null;
  }

  /** Returns true if field agentId is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentId() {
    return this.agentId != null;
  }

  public void setAgentIdIsSet(boolean value) {
    if (!value) {
      this.agentId = null;
    }
  }

  public long getStartTimestamp() {
    return this.startTimestamp;
  }

  public void setStartTimestamp(long startTimestamp) {
    this.startTimestamp = startTimestamp;
    setStartTimestampIsSet(true);
  }

  public void unsetStartTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field startTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID);
  }

  public void setStartTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public void setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public long getCollectInterval() {
    return this.collectInterval;
  }

  public void setCollectInterval(long collectInterval) {
    this.collectInterval = collectInterval;
    setCollectIntervalIsSet(true);
  }

  public void unsetCollectInterval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLLECTINTERVAL_ISSET_ID);
  }

  /** Returns true if field collectInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectInterval() {
    return EncodingUtils.testBit(__isset_bitfield, __COLLECTINTERVAL_ISSET_ID);
  }

  public void setCollectIntervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLLECTINTERVAL_ISSET_ID, value);
  }

  public TJvmGc getGc() {
    return this.gc;
  }

  public void setGc(TJvmGc gc) {
    this.gc = gc;
  }

  public void unsetGc() {
    this.gc = null;
  }

  /** Returns true if field gc is set (has been assigned a value) and false otherwise */
  public boolean isSetGc() {
    return this.gc != null;
  }

  public void setGcIsSet(boolean value) {
    if (!value) {
      this.gc = null;
    }
  }

  public TCpuLoad getCpuLoad() {
    return this.cpuLoad;
  }

  public void setCpuLoad(TCpuLoad cpuLoad) {
    this.cpuLoad = cpuLoad;
  }

  public void unsetCpuLoad() {
    this.cpuLoad = null;
  }

  /** Returns true if field cpuLoad is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuLoad() {
    return this.cpuLoad != null;
  }

  public void setCpuLoadIsSet(boolean value) {
    if (!value) {
      this.cpuLoad = null;
    }
  }

  public TIOLoad getIOLoad() {
    return this.IOLoad;
  }

  public void setIOLoad(TIOLoad IOLoad) {
    this.IOLoad = IOLoad;
  }

  public void unsetIOLoad() {
    this.IOLoad = null;
  }

  /** Returns true if field IOLoad is set (has been assigned a value) and false otherwise */
  public boolean isSetIOLoad() {
    return this.IOLoad != null;
  }

  public void setIOLoadIsSet(boolean value) {
    if (!value) {
      this.IOLoad = null;
    }
  }

  public TNetLoad getNetLoad() {
    return this.netLoad;
  }

  public void setNetLoad(TNetLoad netLoad) {
    this.netLoad = netLoad;
  }

  public void unsetNetLoad() {
    this.netLoad = null;
  }

  /** Returns true if field netLoad is set (has been assigned a value) and false otherwise */
  public boolean isSetNetLoad() {
    return this.netLoad != null;
  }

  public void setNetLoadIsSet(boolean value) {
    if (!value) {
      this.netLoad = null;
    }
  }

  public TMemLoad getMemLoad() {
    return this.memLoad;
  }

  public void setMemLoad(TMemLoad memLoad) {
    this.memLoad = memLoad;
  }

  public void unsetMemLoad() {
    this.memLoad = null;
  }

  /** Returns true if field memLoad is set (has been assigned a value) and false otherwise */
  public boolean isSetMemLoad() {
    return this.memLoad != null;
  }

  public void setMemLoadIsSet(boolean value) {
    if (!value) {
      this.memLoad = null;
    }
  }

  public TMemInfo getMemInfo() {
    return this.memInfo;
  }

  public void setMemInfo(TMemInfo memInfo) {
    this.memInfo = memInfo;
  }

  public void unsetMemInfo() {
    this.memInfo = null;
  }

  /** Returns true if field memInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetMemInfo() {
    return this.memInfo != null;
  }

  public void setMemInfoIsSet(boolean value) {
    if (!value) {
      this.memInfo = null;
    }
  }

  public TDevices getDevices() {
    return this.devices;
  }

  public void setDevices(TDevices devices) {
    this.devices = devices;
  }

  public void unsetDevices() {
    this.devices = null;
  }

  /** Returns true if field devices is set (has been assigned a value) and false otherwise */
  public boolean isSetDevices() {
    return this.devices != null;
  }

  public void setDevicesIsSet(boolean value) {
    if (!value) {
      this.devices = null;
    }
  }

  public TFileSystems getFileSystems() {
    return this.fileSystems;
  }

  public void setFileSystems(TFileSystems fileSystems) {
    this.fileSystems = fileSystems;
  }

  public void unsetFileSystems() {
    this.fileSystems = null;
  }

  /** Returns true if field fileSystems is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSystems() {
    return this.fileSystems != null;
  }

  public void setFileSystemsIsSet(boolean value) {
    if (!value) {
      this.fileSystems = null;
    }
  }

  public TNets getNets() {
    return this.nets;
  }

  public void setNets(TNets nets) {
    this.nets = nets;
  }

  public void unsetNets() {
    this.nets = null;
  }

  /** Returns true if field nets is set (has been assigned a value) and false otherwise */
  public boolean isSetNets() {
    return this.nets != null;
  }

  public void setNetsIsSet(boolean value) {
    if (!value) {
      this.nets = null;
    }
  }

  public TCpus getCpus() {
    return this.cpus;
  }

  public void setCpus(TCpus cpus) {
    this.cpus = cpus;
  }

  public void unsetCpus() {
    this.cpus = null;
  }

  /** Returns true if field cpus is set (has been assigned a value) and false otherwise */
  public boolean isSetCpus() {
    return this.cpus != null;
  }

  public void setCpusIsSet(boolean value) {
    if (!value) {
      this.cpus = null;
    }
  }

  public TProcesses getProcesses() {
    return this.processes;
  }

  public void setProcesses(TProcesses processes) {
    this.processes = processes;
  }

  public void unsetProcesses() {
    this.processes = null;
  }

  /** Returns true if field processes is set (has been assigned a value) and false otherwise */
  public boolean isSetProcesses() {
    return this.processes != null;
  }

  public void setProcessesIsSet(boolean value) {
    if (!value) {
      this.processes = null;
    }
  }

  public TTransaction getTransaction() {
    return this.transaction;
  }

  public void setTransaction(TTransaction transaction) {
    this.transaction = transaction;
  }

  public void unsetTransaction() {
    this.transaction = null;
  }

  /** Returns true if field transaction is set (has been assigned a value) and false otherwise */
  public boolean isSetTransaction() {
    return this.transaction != null;
  }

  public void setTransactionIsSet(boolean value) {
    if (!value) {
      this.transaction = null;
    }
  }

  public TActiveTrace getActiveTrace() {
    return this.activeTrace;
  }

  public void setActiveTrace(TActiveTrace activeTrace) {
    this.activeTrace = activeTrace;
  }

  public void unsetActiveTrace() {
    this.activeTrace = null;
  }

  /** Returns true if field activeTrace is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveTrace() {
    return this.activeTrace != null;
  }

  public void setActiveTraceIsSet(boolean value) {
    if (!value) {
      this.activeTrace = null;
    }
  }

  public String getMetadata() {
    return this.metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
      case AGENT_ID:
        if (value == null) {
          unsetAgentId();
        } else {
          setAgentId((String)value);
        }
        break;

      case START_TIMESTAMP:
        if (value == null) {
          unsetStartTimestamp();
        } else {
          setStartTimestamp((Long)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((Long)value);
        }
        break;

      case COLLECT_INTERVAL:
        if (value == null) {
          unsetCollectInterval();
        } else {
          setCollectInterval((Long)value);
        }
        break;

      case GC:
        if (value == null) {
          unsetGc();
        } else {
          setGc((TJvmGc)value);
        }
        break;

      case CPU_LOAD:
        if (value == null) {
          unsetCpuLoad();
        } else {
          setCpuLoad((TCpuLoad)value);
        }
        break;

      case IOLOAD:
        if (value == null) {
          unsetIOLoad();
        } else {
          setIOLoad((TIOLoad)value);
        }
        break;

      case NET_LOAD:
        if (value == null) {
          unsetNetLoad();
        } else {
          setNetLoad((TNetLoad)value);
        }
        break;

      case MEM_LOAD:
        if (value == null) {
          unsetMemLoad();
        } else {
          setMemLoad((TMemLoad)value);
        }
        break;

      case MEM_INFO:
        if (value == null) {
          unsetMemInfo();
        } else {
          setMemInfo((TMemInfo)value);
        }
        break;

      case DEVICES:
        if (value == null) {
          unsetDevices();
        } else {
          setDevices((TDevices)value);
        }
        break;

      case FILE_SYSTEMS:
        if (value == null) {
          unsetFileSystems();
        } else {
          setFileSystems((TFileSystems)value);
        }
        break;

      case NETS:
        if (value == null) {
          unsetNets();
        } else {
          setNets((TNets)value);
        }
        break;

      case CPUS:
        if (value == null) {
          unsetCpus();
        } else {
          setCpus((TCpus)value);
        }
        break;

      case PROCESSES:
        if (value == null) {
          unsetProcesses();
        } else {
          setProcesses((TProcesses)value);
        }
        break;

      case TRANSACTION:
        if (value == null) {
          unsetTransaction();
        } else {
          setTransaction((TTransaction)value);
        }
        break;

      case ACTIVE_TRACE:
        if (value == null) {
          unsetActiveTrace();
        } else {
          setActiveTrace((TActiveTrace)value);
        }
        break;

      case METADATA:
        if (value == null) {
          unsetMetadata();
        } else {
          setMetadata((String)value);
        }
        break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
      case AGENT_ID:
        return getAgentId();

      case START_TIMESTAMP:
        return Long.valueOf(getStartTimestamp());

      case TIMESTAMP:
        return Long.valueOf(getTimestamp());

      case COLLECT_INTERVAL:
        return Long.valueOf(getCollectInterval());

      case GC:
        return getGc();

      case CPU_LOAD:
        return getCpuLoad();

      case IOLOAD:
        return getIOLoad();

      case NET_LOAD:
        return getNetLoad();

      case MEM_LOAD:
        return getMemLoad();

      case MEM_INFO:
        return getMemInfo();

      case DEVICES:
        return getDevices();

      case FILE_SYSTEMS:
        return getFileSystems();

      case NETS:
        return getNets();

      case CPUS:
        return getCpus();

      case PROCESSES:
        return getProcesses();

      case TRANSACTION:
        return getTransaction();

      case ACTIVE_TRACE:
        return getActiveTrace();

      case METADATA:
        return getMetadata();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
      case AGENT_ID:
        return isSetAgentId();
      case START_TIMESTAMP:
        return isSetStartTimestamp();
      case TIMESTAMP:
        return isSetTimestamp();
      case COLLECT_INTERVAL:
        return isSetCollectInterval();
      case GC:
        return isSetGc();
      case CPU_LOAD:
        return isSetCpuLoad();
      case IOLOAD:
        return isSetIOLoad();
      case NET_LOAD:
        return isSetNetLoad();
      case MEM_LOAD:
        return isSetMemLoad();
      case MEM_INFO:
        return isSetMemInfo();
      case DEVICES:
        return isSetDevices();
      case FILE_SYSTEMS:
        return isSetFileSystems();
      case NETS:
        return isSetNets();
      case CPUS:
        return isSetCpus();
      case PROCESSES:
        return isSetProcesses();
      case TRANSACTION:
        return isSetTransaction();
      case ACTIVE_TRACE:
        return isSetActiveTrace();
      case METADATA:
        return isSetMetadata();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAgentStat)
      return this.equals((TAgentStat)that);
    return false;
  }

  public boolean equals(TAgentStat that) {
    if (that == null)
      return false;

    boolean this_present_agentId = true && this.isSetAgentId();
    boolean that_present_agentId = true && that.isSetAgentId();
    if (this_present_agentId || that_present_agentId) {
      if (!(this_present_agentId && that_present_agentId))
        return false;
      if (!this.agentId.equals(that.agentId))
        return false;
    }

    boolean this_present_startTimestamp = true && this.isSetStartTimestamp();
    boolean that_present_startTimestamp = true && that.isSetStartTimestamp();
    if (this_present_startTimestamp || that_present_startTimestamp) {
      if (!(this_present_startTimestamp && that_present_startTimestamp))
        return false;
      if (this.startTimestamp != that.startTimestamp)
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_collectInterval = true && this.isSetCollectInterval();
    boolean that_present_collectInterval = true && that.isSetCollectInterval();
    if (this_present_collectInterval || that_present_collectInterval) {
      if (!(this_present_collectInterval && that_present_collectInterval))
        return false;
      if (this.collectInterval != that.collectInterval)
        return false;
    }

    boolean this_present_gc = true && this.isSetGc();
    boolean that_present_gc = true && that.isSetGc();
    if (this_present_gc || that_present_gc) {
      if (!(this_present_gc && that_present_gc))
        return false;
      if (!this.gc.equals(that.gc))
        return false;
    }

    boolean this_present_cpuLoad = true && this.isSetCpuLoad();
    boolean that_present_cpuLoad = true && that.isSetCpuLoad();
    if (this_present_cpuLoad || that_present_cpuLoad) {
      if (!(this_present_cpuLoad && that_present_cpuLoad))
        return false;
      if (!this.cpuLoad.equals(that.cpuLoad))
        return false;
    }

    boolean this_present_IOLoad = true && this.isSetIOLoad();
    boolean that_present_IOLoad = true && that.isSetIOLoad();
    if (this_present_IOLoad || that_present_IOLoad) {
      if (!(this_present_IOLoad && that_present_IOLoad))
        return false;
      if (!this.IOLoad.equals(that.IOLoad))
        return false;
    }

    boolean this_present_netLoad = true && this.isSetNetLoad();
    boolean that_present_netLoad = true && that.isSetNetLoad();
    if (this_present_netLoad || that_present_netLoad) {
      if (!(this_present_netLoad && that_present_netLoad))
        return false;
      if (!this.netLoad.equals(that.netLoad))
        return false;
    }

    boolean this_present_memLoad = true && this.isSetMemLoad();
    boolean that_present_memLoad = true && that.isSetMemLoad();
    if (this_present_memLoad || that_present_memLoad) {
      if (!(this_present_memLoad && that_present_memLoad))
        return false;
      if (!this.memLoad.equals(that.memLoad))
        return false;
    }

    boolean this_present_memInfo = true && this.isSetMemInfo();
    boolean that_present_memInfo = true && that.isSetMemInfo();
    if (this_present_memInfo || that_present_memInfo) {
      if (!(this_present_memInfo && that_present_memInfo))
        return false;
      if (!this.memInfo.equals(that.memInfo))
        return false;
    }

    boolean this_present_devices = true && this.isSetDevices();
    boolean that_present_devices = true && that.isSetDevices();
    if (this_present_devices || that_present_devices) {
      if (!(this_present_devices && that_present_devices))
        return false;
      if (!this.devices.equals(that.devices))
        return false;
    }

    boolean this_present_fileSystems = true && this.isSetFileSystems();
    boolean that_present_fileSystems = true && that.isSetFileSystems();
    if (this_present_fileSystems || that_present_fileSystems) {
      if (!(this_present_fileSystems && that_present_fileSystems))
        return false;
      if (!this.fileSystems.equals(that.fileSystems))
        return false;
    }

    boolean this_present_nets = true && this.isSetNets();
    boolean that_present_nets = true && that.isSetNets();
    if (this_present_nets || that_present_nets) {
      if (!(this_present_nets && that_present_nets))
        return false;
      if (!this.nets.equals(that.nets))
        return false;
    }

    boolean this_present_cpus = true && this.isSetCpus();
    boolean that_present_cpus = true && that.isSetCpus();
    if (this_present_cpus || that_present_cpus) {
      if (!(this_present_cpus && that_present_cpus))
        return false;
      if (!this.cpus.equals(that.cpus))
        return false;
    }

    boolean this_present_processes = true && this.isSetProcesses();
    boolean that_present_processes = true && that.isSetProcesses();
    if (this_present_processes || that_present_processes) {
      if (!(this_present_processes && that_present_processes))
        return false;
      if (!this.processes.equals(that.processes))
        return false;
    }

    boolean this_present_transaction = true && this.isSetTransaction();
    boolean that_present_transaction = true && that.isSetTransaction();
    if (this_present_transaction || that_present_transaction) {
      if (!(this_present_transaction && that_present_transaction))
        return false;
      if (!this.transaction.equals(that.transaction))
        return false;
    }

    boolean this_present_activeTrace = true && this.isSetActiveTrace();
    boolean that_present_activeTrace = true && that.isSetActiveTrace();
    if (this_present_activeTrace || that_present_activeTrace) {
      if (!(this_present_activeTrace && that_present_activeTrace))
        return false;
      if (!this.activeTrace.equals(that.activeTrace))
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_agentId = true && (isSetAgentId());
    list.add(present_agentId);
    if (present_agentId)
      list.add(agentId);

    boolean present_startTimestamp = true && (isSetStartTimestamp());
    list.add(present_startTimestamp);
    if (present_startTimestamp)
      list.add(startTimestamp);

    boolean present_timestamp = true && (isSetTimestamp());
    list.add(present_timestamp);
    if (present_timestamp)
      list.add(timestamp);

    boolean present_collectInterval = true && (isSetCollectInterval());
    list.add(present_collectInterval);
    if (present_collectInterval)
      list.add(collectInterval);

    boolean present_gc = true && (isSetGc());
    list.add(present_gc);
    if (present_gc)
      list.add(gc);

    boolean present_cpuLoad = true && (isSetCpuLoad());
    list.add(present_cpuLoad);
    if (present_cpuLoad)
      list.add(cpuLoad);

    boolean present_IOLoad = true && (isSetIOLoad());
    list.add(present_IOLoad);
    if (present_IOLoad)
      list.add(IOLoad);

    boolean present_netLoad = true && (isSetNetLoad());
    list.add(present_netLoad);
    if (present_netLoad)
      list.add(netLoad);

    boolean present_memLoad = true && (isSetMemLoad());
    list.add(present_memLoad);
    if (present_memLoad)
      list.add(memLoad);

    boolean present_memInfo = true && (isSetMemInfo());
    list.add(present_memInfo);
    if (present_memInfo)
      list.add(memInfo);

    boolean present_devices = true && (isSetDevices());
    list.add(present_devices);
    if (present_devices)
      list.add(devices);

    boolean present_fileSystems = true && (isSetFileSystems());
    list.add(present_fileSystems);
    if (present_fileSystems)
      list.add(fileSystems);

    boolean present_nets = true && (isSetNets());
    list.add(present_nets);
    if (present_nets)
      list.add(nets);

    boolean present_cpus = true && (isSetCpus());
    list.add(present_cpus);
    if (present_cpus)
      list.add(cpus);

    boolean present_processes = true && (isSetProcesses());
    list.add(present_processes);
    if (present_processes)
      list.add(processes);

    boolean present_transaction = true && (isSetTransaction());
    list.add(present_transaction);
    if (present_transaction)
      list.add(transaction);

    boolean present_activeTrace = true && (isSetActiveTrace());
    list.add(present_activeTrace);
    if (present_activeTrace)
      list.add(activeTrace);

    boolean present_metadata = true && (isSetMetadata());
    list.add(present_metadata);
    if (present_metadata)
      list.add(metadata);

    return list.hashCode();
  }

  @Override
  public int compareTo(TAgentStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAgentId()).compareTo(other.isSetAgentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentId, other.agentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTimestamp()).compareTo(other.isSetStartTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimestamp, other.startTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectInterval()).compareTo(other.isSetCollectInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectInterval, other.collectInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGc()).compareTo(other.isSetGc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gc, other.gc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuLoad()).compareTo(other.isSetCpuLoad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuLoad()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuLoad, other.cpuLoad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIOLoad()).compareTo(other.isSetIOLoad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIOLoad()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IOLoad, other.IOLoad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetLoad()).compareTo(other.isSetNetLoad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetLoad()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.netLoad, other.netLoad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemLoad()).compareTo(other.isSetMemLoad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemLoad()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memLoad, other.memLoad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemInfo()).compareTo(other.isSetMemInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memInfo, other.memInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDevices()).compareTo(other.isSetDevices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.devices, other.devices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSystems()).compareTo(other.isSetFileSystems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSystems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSystems, other.fileSystems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNets()).compareTo(other.isSetNets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nets, other.nets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpus()).compareTo(other.isSetCpus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpus, other.cpus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcesses()).compareTo(other.isSetProcesses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcesses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processes, other.processes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransaction()).compareTo(other.isSetTransaction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransaction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transaction, other.transaction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveTrace()).compareTo(other.isSetActiveTrace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveTrace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeTrace, other.activeTrace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAgentStat(");
    boolean first = true;

    if (isSetAgentId()) {
      sb.append("agentId:");
      if (this.agentId == null) {
        sb.append("null");
      } else {
        sb.append(this.agentId);
      }
      first = false;
    }
    if (isSetStartTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("startTimestamp:");
      sb.append(this.startTimestamp);
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (isSetCollectInterval()) {
      if (!first) sb.append(", ");
      sb.append("collectInterval:");
      sb.append(this.collectInterval);
      first = false;
    }
    if (isSetGc()) {
      if (!first) sb.append(", ");
      sb.append("gc:");
      if (this.gc == null) {
        sb.append("null");
      } else {
        sb.append(this.gc);
      }
      first = false;
    }
    if (isSetCpuLoad()) {
      if (!first) sb.append(", ");
      sb.append("cpuLoad:");
      if (this.cpuLoad == null) {
        sb.append("null");
      } else {
        sb.append(this.cpuLoad);
      }
      first = false;
    }
    if (isSetIOLoad()) {
      if (!first) sb.append(", ");
      sb.append("IOLoad:");
      if (this.IOLoad == null) {
        sb.append("null");
      } else {
        sb.append(this.IOLoad);
      }
      first = false;
    }
    if (isSetNetLoad()) {
      if (!first) sb.append(", ");
      sb.append("netLoad:");
      if (this.netLoad == null) {
        sb.append("null");
      } else {
        sb.append(this.netLoad);
      }
      first = false;
    }
    if (isSetMemLoad()) {
      if (!first) sb.append(", ");
      sb.append("memLoad:");
      if (this.memLoad == null) {
        sb.append("null");
      } else {
        sb.append(this.memLoad);
      }
      first = false;
    }
    if (isSetMemInfo()) {
      if (!first) sb.append(", ");
      sb.append("memInfo:");
      if (this.memInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.memInfo);
      }
      first = false;
    }
    if (isSetDevices()) {
      if (!first) sb.append(", ");
      sb.append("devices:");
      if (this.devices == null) {
        sb.append("null");
      } else {
        sb.append(this.devices);
      }
      first = false;
    }
    if (isSetFileSystems()) {
      if (!first) sb.append(", ");
      sb.append("fileSystems:");
      if (this.fileSystems == null) {
        sb.append("null");
      } else {
        sb.append(this.fileSystems);
      }
      first = false;
    }
    if (isSetNets()) {
      if (!first) sb.append(", ");
      sb.append("nets:");
      if (this.nets == null) {
        sb.append("null");
      } else {
        sb.append(this.nets);
      }
      first = false;
    }
    if (isSetCpus()) {
      if (!first) sb.append(", ");
      sb.append("cpus:");
      if (this.cpus == null) {
        sb.append("null");
      } else {
        sb.append(this.cpus);
      }
      first = false;
    }
    if (isSetProcesses()) {
      if (!first) sb.append(", ");
      sb.append("processes:");
      if (this.processes == null) {
        sb.append("null");
      } else {
        sb.append(this.processes);
      }
      first = false;
    }
    if (isSetTransaction()) {
      if (!first) sb.append(", ");
      sb.append("transaction:");
      if (this.transaction == null) {
        sb.append("null");
      } else {
        sb.append(this.transaction);
      }
      first = false;
    }
    if (isSetActiveTrace()) {
      if (!first) sb.append(", ");
      sb.append("activeTrace:");
      if (this.activeTrace == null) {
        sb.append("null");
      } else {
        sb.append(this.activeTrace);
      }
      first = false;
    }
    if (isSetMetadata()) {
      if (!first) sb.append(", ");
      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.metadata);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (gc != null) {
      gc.validate();
    }
    if (cpuLoad != null) {
      cpuLoad.validate();
    }
    if (IOLoad != null) {
      IOLoad.validate();
    }
    if (netLoad != null) {
      netLoad.validate();
    }
    if (memLoad != null) {
      memLoad.validate();
    }
    if (memInfo != null) {
      memInfo.validate();
    }
    if (devices != null) {
      devices.validate();
    }
    if (fileSystems != null) {
      fileSystems.validate();
    }
    if (nets != null) {
      nets.validate();
    }
    if (cpus != null) {
      cpus.validate();
    }
    if (processes != null) {
      processes.validate();
    }
    if (transaction != null) {
      transaction.validate();
    }
    if (activeTrace != null) {
      activeTrace.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAgentStatStandardSchemeFactory implements SchemeFactory {
    public TAgentStatStandardScheme getScheme() {
      return new TAgentStatStandardScheme();
    }
  }

  private static class TAgentStatStandardScheme extends StandardScheme<TAgentStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAgentStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // AGENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agentId = iprot.readString();
              struct.setAgentIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTimestamp = iprot.readI64();
              struct.setStartTimestampIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLLECT_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.collectInterval = iprot.readI64();
              struct.setCollectIntervalIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.gc = new TJvmGc();
              struct.gc.read(iprot);
              struct.setGcIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CPU_LOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cpuLoad = new TCpuLoad();
              struct.cpuLoad.read(iprot);
              struct.setCpuLoadIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // IOLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.IOLoad = new TIOLoad();
              struct.IOLoad.read(iprot);
              struct.setIOLoadIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // NET_LOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.netLoad = new TNetLoad();
              struct.netLoad.read(iprot);
              struct.setNetLoadIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // MEM_LOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.memLoad = new TMemLoad();
              struct.memLoad.read(iprot);
              struct.setMemLoadIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MEM_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.memInfo = new TMemInfo();
              struct.memInfo.read(iprot);
              struct.setMemInfoIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // DEVICES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.devices = new TDevices();
              struct.devices.read(iprot);
              struct.setDevicesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // FILE_SYSTEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fileSystems = new TFileSystems();
              struct.fileSystems.read(iprot);
              struct.setFileSystemsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // NETS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nets = new TNets();
              struct.nets.read(iprot);
              struct.setNetsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // CPUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cpus = new TCpus();
              struct.cpus.read(iprot);
              struct.setCpusIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PROCESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.processes = new TProcesses();
              struct.processes.read(iprot);
              struct.setProcessesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // TRANSACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.transaction = new TTransaction();
              struct.transaction.read(iprot);
              struct.setTransactionIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // ACTIVE_TRACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.activeTrace = new TActiveTrace();
              struct.activeTrace.read(iprot);
              struct.setActiveTraceIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata = iprot.readString();
              struct.setMetadataIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAgentStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.agentId != null) {
        if (struct.isSetAgentId()) {
          oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
          oprot.writeString(struct.agentId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStartTimestamp()) {
        oprot.writeFieldBegin(START_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.startTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCollectInterval()) {
        oprot.writeFieldBegin(COLLECT_INTERVAL_FIELD_DESC);
        oprot.writeI64(struct.collectInterval);
        oprot.writeFieldEnd();
      }
      if (struct.gc != null) {
        if (struct.isSetGc()) {
          oprot.writeFieldBegin(GC_FIELD_DESC);
          struct.gc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpuLoad != null) {
        if (struct.isSetCpuLoad()) {
          oprot.writeFieldBegin(CPU_LOAD_FIELD_DESC);
          struct.cpuLoad.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.IOLoad != null) {
        if (struct.isSetIOLoad()) {
          oprot.writeFieldBegin(IOLOAD_FIELD_DESC);
          struct.IOLoad.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.netLoad != null) {
        if (struct.isSetNetLoad()) {
          oprot.writeFieldBegin(NET_LOAD_FIELD_DESC);
          struct.netLoad.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.memLoad != null) {
        if (struct.isSetMemLoad()) {
          oprot.writeFieldBegin(MEM_LOAD_FIELD_DESC);
          struct.memLoad.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.memInfo != null) {
        if (struct.isSetMemInfo()) {
          oprot.writeFieldBegin(MEM_INFO_FIELD_DESC);
          struct.memInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.devices != null) {
        if (struct.isSetDevices()) {
          oprot.writeFieldBegin(DEVICES_FIELD_DESC);
          struct.devices.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fileSystems != null) {
        if (struct.isSetFileSystems()) {
          oprot.writeFieldBegin(FILE_SYSTEMS_FIELD_DESC);
          struct.fileSystems.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nets != null) {
        if (struct.isSetNets()) {
          oprot.writeFieldBegin(NETS_FIELD_DESC);
          struct.nets.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpus != null) {
        if (struct.isSetCpus()) {
          oprot.writeFieldBegin(CPUS_FIELD_DESC);
          struct.cpus.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.processes != null) {
        if (struct.isSetProcesses()) {
          oprot.writeFieldBegin(PROCESSES_FIELD_DESC);
          struct.processes.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.transaction != null) {
        if (struct.isSetTransaction()) {
          oprot.writeFieldBegin(TRANSACTION_FIELD_DESC);
          struct.transaction.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.activeTrace != null) {
        if (struct.isSetActiveTrace()) {
          oprot.writeFieldBegin(ACTIVE_TRACE_FIELD_DESC);
          struct.activeTrace.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.metadata != null) {
        if (struct.isSetMetadata()) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          oprot.writeString(struct.metadata);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAgentStatTupleSchemeFactory implements SchemeFactory {
    public TAgentStatTupleScheme getScheme() {
      return new TAgentStatTupleScheme();
    }
  }

  private static class TAgentStatTupleScheme extends TupleScheme<TAgentStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAgentStat struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAgentId()) {
        optionals.set(0);
      }
      if (struct.isSetStartTimestamp()) {
        optionals.set(1);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetCollectInterval()) {
        optionals.set(3);
      }
      if (struct.isSetGc()) {
        optionals.set(4);
      }
      if (struct.isSetCpuLoad()) {
        optionals.set(5);
      }
      if (struct.isSetIOLoad()) {
        optionals.set(6);
      }
      if (struct.isSetNetLoad()) {
        optionals.set(7);
      }
      if (struct.isSetMemLoad()) {
        optionals.set(8);
      }
      if (struct.isSetMemInfo()) {
        optionals.set(9);
      }
      if (struct.isSetDevices()) {
        optionals.set(10);
      }
      if (struct.isSetFileSystems()) {
        optionals.set(11);
      }
      if (struct.isSetNets()) {
        optionals.set(12);
      }
      if (struct.isSetCpus()) {
        optionals.set(13);
      }
      if (struct.isSetProcesses()) {
        optionals.set(14);
      }
      if (struct.isSetTransaction()) {
        optionals.set(15);
      }
      if (struct.isSetActiveTrace()) {
        optionals.set(16);
      }
      if (struct.isSetMetadata()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetAgentId()) {
        oprot.writeString(struct.agentId);
      }
      if (struct.isSetStartTimestamp()) {
        oprot.writeI64(struct.startTimestamp);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetCollectInterval()) {
        oprot.writeI64(struct.collectInterval);
      }
      if (struct.isSetGc()) {
        struct.gc.write(oprot);
      }
      if (struct.isSetCpuLoad()) {
        struct.cpuLoad.write(oprot);
      }
      if (struct.isSetIOLoad()) {
        struct.IOLoad.write(oprot);
      }
      if (struct.isSetNetLoad()) {
        struct.netLoad.write(oprot);
      }
      if (struct.isSetMemLoad()) {
        struct.memLoad.write(oprot);
      }
      if (struct.isSetMemInfo()) {
        struct.memInfo.write(oprot);
      }
      if (struct.isSetDevices()) {
        struct.devices.write(oprot);
      }
      if (struct.isSetFileSystems()) {
        struct.fileSystems.write(oprot);
      }
      if (struct.isSetNets()) {
        struct.nets.write(oprot);
      }
      if (struct.isSetCpus()) {
        struct.cpus.write(oprot);
      }
      if (struct.isSetProcesses()) {
        struct.processes.write(oprot);
      }
      if (struct.isSetTransaction()) {
        struct.transaction.write(oprot);
      }
      if (struct.isSetActiveTrace()) {
        struct.activeTrace.write(oprot);
      }
      if (struct.isSetMetadata()) {
        oprot.writeString(struct.metadata);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAgentStat struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.agentId = iprot.readString();
        struct.setAgentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startTimestamp = iprot.readI64();
        struct.setStartTimestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.collectInterval = iprot.readI64();
        struct.setCollectIntervalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.gc = new TJvmGc();
        struct.gc.read(iprot);
        struct.setGcIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cpuLoad = new TCpuLoad();
        struct.cpuLoad.read(iprot);
        struct.setCpuLoadIsSet(true);
      }
      if (incoming.get(6)) {
        struct.IOLoad = new TIOLoad();
        struct.IOLoad.read(iprot);
        struct.setIOLoadIsSet(true);
      }
      if (incoming.get(7)) {
        struct.netLoad = new TNetLoad();
        struct.netLoad.read(iprot);
        struct.setNetLoadIsSet(true);
      }
      if (incoming.get(8)) {
        struct.memLoad = new TMemLoad();
        struct.memLoad.read(iprot);
        struct.setMemLoadIsSet(true);
      }
      if (incoming.get(9)) {
        struct.memInfo = new TMemInfo();
        struct.memInfo.read(iprot);
        struct.setMemInfoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.devices = new TDevices();
        struct.devices.read(iprot);
        struct.setDevicesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.fileSystems = new TFileSystems();
        struct.fileSystems.read(iprot);
        struct.setFileSystemsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.nets = new TNets();
        struct.nets.read(iprot);
        struct.setNetsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cpus = new TCpus();
        struct.cpus.read(iprot);
        struct.setCpusIsSet(true);
      }
      if (incoming.get(14)) {
        struct.processes = new TProcesses();
        struct.processes.read(iprot);
        struct.setProcessesIsSet(true);
      }
      if (incoming.get(15)) {
        struct.transaction = new TTransaction();
        struct.transaction.read(iprot);
        struct.setTransactionIsSet(true);
      }
      if (incoming.get(16)) {
        struct.activeTrace = new TActiveTrace();
        struct.activeTrace.read(iprot);
        struct.setActiveTraceIsSet(true);
      }
      if (incoming.get(17)) {
        struct.metadata = iprot.readString();
        struct.setMetadataIsSet(true);
      }
    }
  }

}

