/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.navercorp.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-9")
public class TDeviceInfo implements org.apache.thrift.TBase<TDeviceInfo, TDeviceInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TDeviceInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDeviceInfo");

  private static final org.apache.thrift.protocol.TField DEVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TPS_FIELD_DESC = new org.apache.thrift.protocol.TField("tps", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField READ_PER_SECOND_FIELD_DESC = new org.apache.thrift.protocol.TField("readPerSecond", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField WRITE_PER_SECOND_FIELD_DESC = new org.apache.thrift.protocol.TField("writePerSecond", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField READ_FIELD_DESC = new org.apache.thrift.protocol.TField("read", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField WRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("write", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDeviceInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDeviceInfoTupleSchemeFactory());
  }

  private String deviceName; // optional
  private double tps; // optional
  private double readPerSecond; // optional
  private double writePerSecond; // optional
  private long read; // optional
  private long write; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEVICE_NAME((short)1, "deviceName"),
    TPS((short)2, "tps"),
    READ_PER_SECOND((short)3, "readPerSecond"),
    WRITE_PER_SECOND((short)4, "writePerSecond"),
    READ((short)5, "read"),
    WRITE((short)6, "write");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVICE_NAME
          return DEVICE_NAME;
        case 2: // TPS
          return TPS;
        case 3: // READ_PER_SECOND
          return READ_PER_SECOND;
        case 4: // WRITE_PER_SECOND
          return WRITE_PER_SECOND;
        case 5: // READ
          return READ;
        case 6: // WRITE
          return WRITE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TPS_ISSET_ID = 0;
  private static final int __READPERSECOND_ISSET_ID = 1;
  private static final int __WRITEPERSECOND_ISSET_ID = 2;
  private static final int __READ_ISSET_ID = 3;
  private static final int __WRITE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DEVICE_NAME,_Fields.TPS,_Fields.READ_PER_SECOND,_Fields.WRITE_PER_SECOND,_Fields.READ,_Fields.WRITE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("deviceName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TPS, new org.apache.thrift.meta_data.FieldMetaData("tps", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.READ_PER_SECOND, new org.apache.thrift.meta_data.FieldMetaData("readPerSecond", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WRITE_PER_SECOND, new org.apache.thrift.meta_data.FieldMetaData("writePerSecond", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.READ, new org.apache.thrift.meta_data.FieldMetaData("read", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WRITE, new org.apache.thrift.meta_data.FieldMetaData("write", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDeviceInfo.class, metaDataMap);
  }

  public TDeviceInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDeviceInfo(TDeviceInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDeviceName()) {
      this.deviceName = other.deviceName;
    }
    this.tps = other.tps;
    this.readPerSecond = other.readPerSecond;
    this.writePerSecond = other.writePerSecond;
    this.read = other.read;
    this.write = other.write;
  }

  public TDeviceInfo deepCopy() {
    return new TDeviceInfo(this);
  }

  @Override
  public void clear() {
    this.deviceName = null;
    setTpsIsSet(false);
    this.tps = 0.0;
    setReadPerSecondIsSet(false);
    this.readPerSecond = 0.0;
    setWritePerSecondIsSet(false);
    this.writePerSecond = 0.0;
    setReadIsSet(false);
    this.read = 0;
    setWriteIsSet(false);
    this.write = 0;
  }

  public String getDeviceName() {
    return this.deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }

  public void unsetDeviceName() {
    this.deviceName = null;
  }

  /** Returns true if field deviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceName() {
    return this.deviceName != null;
  }

  public void setDeviceNameIsSet(boolean value) {
    if (!value) {
      this.deviceName = null;
    }
  }

  public double getTps() {
    return this.tps;
  }

  public void setTps(double tps) {
    this.tps = tps;
    setTpsIsSet(true);
  }

  public void unsetTps() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TPS_ISSET_ID);
  }

  /** Returns true if field tps is set (has been assigned a value) and false otherwise */
  public boolean isSetTps() {
    return EncodingUtils.testBit(__isset_bitfield, __TPS_ISSET_ID);
  }

  public void setTpsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TPS_ISSET_ID, value);
  }

  public double getReadPerSecond() {
    return this.readPerSecond;
  }

  public void setReadPerSecond(double readPerSecond) {
    this.readPerSecond = readPerSecond;
    setReadPerSecondIsSet(true);
  }

  public void unsetReadPerSecond() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READPERSECOND_ISSET_ID);
  }

  /** Returns true if field readPerSecond is set (has been assigned a value) and false otherwise */
  public boolean isSetReadPerSecond() {
    return EncodingUtils.testBit(__isset_bitfield, __READPERSECOND_ISSET_ID);
  }

  public void setReadPerSecondIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READPERSECOND_ISSET_ID, value);
  }

  public double getWritePerSecond() {
    return this.writePerSecond;
  }

  public void setWritePerSecond(double writePerSecond) {
    this.writePerSecond = writePerSecond;
    setWritePerSecondIsSet(true);
  }

  public void unsetWritePerSecond() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRITEPERSECOND_ISSET_ID);
  }

  /** Returns true if field writePerSecond is set (has been assigned a value) and false otherwise */
  public boolean isSetWritePerSecond() {
    return EncodingUtils.testBit(__isset_bitfield, __WRITEPERSECOND_ISSET_ID);
  }

  public void setWritePerSecondIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRITEPERSECOND_ISSET_ID, value);
  }

  public long getRead() {
    return this.read;
  }

  public void setRead(long read) {
    this.read = read;
    setReadIsSet(true);
  }

  public void unsetRead() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READ_ISSET_ID);
  }

  /** Returns true if field read is set (has been assigned a value) and false otherwise */
  public boolean isSetRead() {
    return EncodingUtils.testBit(__isset_bitfield, __READ_ISSET_ID);
  }

  public void setReadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READ_ISSET_ID, value);
  }

  public long getWrite() {
    return this.write;
  }

  public void setWrite(long write) {
    this.write = write;
    setWriteIsSet(true);
  }

  public void unsetWrite() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRITE_ISSET_ID);
  }

  /** Returns true if field write is set (has been assigned a value) and false otherwise */
  public boolean isSetWrite() {
    return EncodingUtils.testBit(__isset_bitfield, __WRITE_ISSET_ID);
  }

  public void setWriteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRITE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEVICE_NAME:
      if (value == null) {
        unsetDeviceName();
      } else {
        setDeviceName((String)value);
      }
      break;

    case TPS:
      if (value == null) {
        unsetTps();
      } else {
        setTps((Double)value);
      }
      break;

    case READ_PER_SECOND:
      if (value == null) {
        unsetReadPerSecond();
      } else {
        setReadPerSecond((Double)value);
      }
      break;

    case WRITE_PER_SECOND:
      if (value == null) {
        unsetWritePerSecond();
      } else {
        setWritePerSecond((Double)value);
      }
      break;

    case READ:
      if (value == null) {
        unsetRead();
      } else {
        setRead((Long)value);
      }
      break;

    case WRITE:
      if (value == null) {
        unsetWrite();
      } else {
        setWrite((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVICE_NAME:
      return getDeviceName();

    case TPS:
      return Double.valueOf(getTps());

    case READ_PER_SECOND:
      return Double.valueOf(getReadPerSecond());

    case WRITE_PER_SECOND:
      return Double.valueOf(getWritePerSecond());

    case READ:
      return Long.valueOf(getRead());

    case WRITE:
      return Long.valueOf(getWrite());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEVICE_NAME:
      return isSetDeviceName();
    case TPS:
      return isSetTps();
    case READ_PER_SECOND:
      return isSetReadPerSecond();
    case WRITE_PER_SECOND:
      return isSetWritePerSecond();
    case READ:
      return isSetRead();
    case WRITE:
      return isSetWrite();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDeviceInfo)
      return this.equals((TDeviceInfo)that);
    return false;
  }

  public boolean equals(TDeviceInfo that) {
    if (that == null)
      return false;

    boolean this_present_deviceName = true && this.isSetDeviceName();
    boolean that_present_deviceName = true && that.isSetDeviceName();
    if (this_present_deviceName || that_present_deviceName) {
      if (!(this_present_deviceName && that_present_deviceName))
        return false;
      if (!this.deviceName.equals(that.deviceName))
        return false;
    }

    boolean this_present_tps = true && this.isSetTps();
    boolean that_present_tps = true && that.isSetTps();
    if (this_present_tps || that_present_tps) {
      if (!(this_present_tps && that_present_tps))
        return false;
      if (this.tps != that.tps)
        return false;
    }

    boolean this_present_readPerSecond = true && this.isSetReadPerSecond();
    boolean that_present_readPerSecond = true && that.isSetReadPerSecond();
    if (this_present_readPerSecond || that_present_readPerSecond) {
      if (!(this_present_readPerSecond && that_present_readPerSecond))
        return false;
      if (this.readPerSecond != that.readPerSecond)
        return false;
    }

    boolean this_present_writePerSecond = true && this.isSetWritePerSecond();
    boolean that_present_writePerSecond = true && that.isSetWritePerSecond();
    if (this_present_writePerSecond || that_present_writePerSecond) {
      if (!(this_present_writePerSecond && that_present_writePerSecond))
        return false;
      if (this.writePerSecond != that.writePerSecond)
        return false;
    }

    boolean this_present_read = true && this.isSetRead();
    boolean that_present_read = true && that.isSetRead();
    if (this_present_read || that_present_read) {
      if (!(this_present_read && that_present_read))
        return false;
      if (this.read != that.read)
        return false;
    }

    boolean this_present_write = true && this.isSetWrite();
    boolean that_present_write = true && that.isSetWrite();
    if (this_present_write || that_present_write) {
      if (!(this_present_write && that_present_write))
        return false;
      if (this.write != that.write)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_deviceName = true && (isSetDeviceName());
    list.add(present_deviceName);
    if (present_deviceName)
      list.add(deviceName);

    boolean present_tps = true && (isSetTps());
    list.add(present_tps);
    if (present_tps)
      list.add(tps);

    boolean present_readPerSecond = true && (isSetReadPerSecond());
    list.add(present_readPerSecond);
    if (present_readPerSecond)
      list.add(readPerSecond);

    boolean present_writePerSecond = true && (isSetWritePerSecond());
    list.add(present_writePerSecond);
    if (present_writePerSecond)
      list.add(writePerSecond);

    boolean present_read = true && (isSetRead());
    list.add(present_read);
    if (present_read)
      list.add(read);

    boolean present_write = true && (isSetWrite());
    list.add(present_write);
    if (present_write)
      list.add(write);

    return list.hashCode();
  }

  @Override
  public int compareTo(TDeviceInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDeviceName()).compareTo(other.isSetDeviceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceName, other.deviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTps()).compareTo(other.isSetTps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tps, other.tps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadPerSecond()).compareTo(other.isSetReadPerSecond());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadPerSecond()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readPerSecond, other.readPerSecond);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWritePerSecond()).compareTo(other.isSetWritePerSecond());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWritePerSecond()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writePerSecond, other.writePerSecond);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRead()).compareTo(other.isSetRead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read, other.read);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWrite()).compareTo(other.isSetWrite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWrite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.write, other.write);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDeviceInfo(");
    boolean first = true;

    if (isSetDeviceName()) {
      sb.append("deviceName:");
      if (this.deviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceName);
      }
      first = false;
    }
    if (isSetTps()) {
      if (!first) sb.append(", ");
      sb.append("tps:");
      sb.append(this.tps);
      first = false;
    }
    if (isSetReadPerSecond()) {
      if (!first) sb.append(", ");
      sb.append("readPerSecond:");
      sb.append(this.readPerSecond);
      first = false;
    }
    if (isSetWritePerSecond()) {
      if (!first) sb.append(", ");
      sb.append("writePerSecond:");
      sb.append(this.writePerSecond);
      first = false;
    }
    if (isSetRead()) {
      if (!first) sb.append(", ");
      sb.append("read:");
      sb.append(this.read);
      first = false;
    }
    if (isSetWrite()) {
      if (!first) sb.append(", ");
      sb.append("write:");
      sb.append(this.write);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDeviceInfoStandardSchemeFactory implements SchemeFactory {
    public TDeviceInfoStandardScheme getScheme() {
      return new TDeviceInfoStandardScheme();
    }
  }

  private static class TDeviceInfoStandardScheme extends StandardScheme<TDeviceInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDeviceInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceName = iprot.readString();
              struct.setDeviceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TPS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tps = iprot.readDouble();
              struct.setTpsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // READ_PER_SECOND
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.readPerSecond = iprot.readDouble();
              struct.setReadPerSecondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WRITE_PER_SECOND
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.writePerSecond = iprot.readDouble();
              struct.setWritePerSecondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // READ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.read = iprot.readI64();
              struct.setReadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WRITE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.write = iprot.readI64();
              struct.setWriteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDeviceInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.deviceName != null) {
        if (struct.isSetDeviceName()) {
          oprot.writeFieldBegin(DEVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.deviceName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTps()) {
        oprot.writeFieldBegin(TPS_FIELD_DESC);
        oprot.writeDouble(struct.tps);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReadPerSecond()) {
        oprot.writeFieldBegin(READ_PER_SECOND_FIELD_DESC);
        oprot.writeDouble(struct.readPerSecond);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWritePerSecond()) {
        oprot.writeFieldBegin(WRITE_PER_SECOND_FIELD_DESC);
        oprot.writeDouble(struct.writePerSecond);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRead()) {
        oprot.writeFieldBegin(READ_FIELD_DESC);
        oprot.writeI64(struct.read);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWrite()) {
        oprot.writeFieldBegin(WRITE_FIELD_DESC);
        oprot.writeI64(struct.write);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDeviceInfoTupleSchemeFactory implements SchemeFactory {
    public TDeviceInfoTupleScheme getScheme() {
      return new TDeviceInfoTupleScheme();
    }
  }

  private static class TDeviceInfoTupleScheme extends TupleScheme<TDeviceInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDeviceInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDeviceName()) {
        optionals.set(0);
      }
      if (struct.isSetTps()) {
        optionals.set(1);
      }
      if (struct.isSetReadPerSecond()) {
        optionals.set(2);
      }
      if (struct.isSetWritePerSecond()) {
        optionals.set(3);
      }
      if (struct.isSetRead()) {
        optionals.set(4);
      }
      if (struct.isSetWrite()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetDeviceName()) {
        oprot.writeString(struct.deviceName);
      }
      if (struct.isSetTps()) {
        oprot.writeDouble(struct.tps);
      }
      if (struct.isSetReadPerSecond()) {
        oprot.writeDouble(struct.readPerSecond);
      }
      if (struct.isSetWritePerSecond()) {
        oprot.writeDouble(struct.writePerSecond);
      }
      if (struct.isSetRead()) {
        oprot.writeI64(struct.read);
      }
      if (struct.isSetWrite()) {
        oprot.writeI64(struct.write);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDeviceInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.deviceName = iprot.readString();
        struct.setDeviceNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tps = iprot.readDouble();
        struct.setTpsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.readPerSecond = iprot.readDouble();
        struct.setReadPerSecondIsSet(true);
      }
      if (incoming.get(3)) {
        struct.writePerSecond = iprot.readDouble();
        struct.setWritePerSecondIsSet(true);
      }
      if (incoming.get(4)) {
        struct.read = iprot.readI64();
        struct.setReadIsSet(true);
      }
      if (incoming.get(5)) {
        struct.write = iprot.readI64();
        struct.setWriteIsSet(true);
      }
    }
  }

}

