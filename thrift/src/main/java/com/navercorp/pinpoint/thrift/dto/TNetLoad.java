/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.navercorp.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-29")
public class TNetLoad implements org.apache.thrift.TBase<TNetLoad, TNetLoad._Fields>, java.io.Serializable, Cloneable, Comparable<TNetLoad> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNetLoad");

  private static final org.apache.thrift.protocol.TField IN_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("inSpeed", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField OUT_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("outSpeed", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("speed", org.apache.thrift.protocol.TType.I64, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TNetLoadStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TNetLoadTupleSchemeFactory());
  }

  private double inSpeed; // optional
  private double outSpeed; // optional
  private long speed; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IN_SPEED((short)11, "inSpeed"),
    OUT_SPEED((short)12, "outSpeed"),
    SPEED((short)13, "speed");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 11: // IN_SPEED
          return IN_SPEED;
        case 12: // OUT_SPEED
          return OUT_SPEED;
        case 13: // SPEED
          return SPEED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INSPEED_ISSET_ID = 0;
  private static final int __OUTSPEED_ISSET_ID = 1;
  private static final int __SPEED_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IN_SPEED,_Fields.OUT_SPEED,_Fields.SPEED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IN_SPEED, new org.apache.thrift.meta_data.FieldMetaData("inSpeed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OUT_SPEED, new org.apache.thrift.meta_data.FieldMetaData("outSpeed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPEED, new org.apache.thrift.meta_data.FieldMetaData("speed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNetLoad.class, metaDataMap);
  }

  public TNetLoad() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNetLoad(TNetLoad other) {
    __isset_bitfield = other.__isset_bitfield;
    this.inSpeed = other.inSpeed;
    this.outSpeed = other.outSpeed;
    this.speed = other.speed;
  }

  public TNetLoad deepCopy() {
    return new TNetLoad(this);
  }

  @Override
  public void clear() {
    setInSpeedIsSet(false);
    this.inSpeed = 0.0;
    setOutSpeedIsSet(false);
    this.outSpeed = 0.0;
    setSpeedIsSet(false);
    this.speed = 0;
  }

  public double getInSpeed() {
    return this.inSpeed;
  }

  public void setInSpeed(double inSpeed) {
    this.inSpeed = inSpeed;
    setInSpeedIsSet(true);
  }

  public void unsetInSpeed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSPEED_ISSET_ID);
  }

  /** Returns true if field inSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetInSpeed() {
    return EncodingUtils.testBit(__isset_bitfield, __INSPEED_ISSET_ID);
  }

  public void setInSpeedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSPEED_ISSET_ID, value);
  }

  public double getOutSpeed() {
    return this.outSpeed;
  }

  public void setOutSpeed(double outSpeed) {
    this.outSpeed = outSpeed;
    setOutSpeedIsSet(true);
  }

  public void unsetOutSpeed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTSPEED_ISSET_ID);
  }

  /** Returns true if field outSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetOutSpeed() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTSPEED_ISSET_ID);
  }

  public void setOutSpeedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTSPEED_ISSET_ID, value);
  }

  public long getSpeed() {
    return this.speed;
  }

  public void setSpeed(long speed) {
    this.speed = speed;
    setSpeedIsSet(true);
  }

  public void unsetSpeed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPEED_ISSET_ID);
  }

  /** Returns true if field speed is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeed() {
    return EncodingUtils.testBit(__isset_bitfield, __SPEED_ISSET_ID);
  }

  public void setSpeedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPEED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IN_SPEED:
      if (value == null) {
        unsetInSpeed();
      } else {
        setInSpeed((Double)value);
      }
      break;

    case OUT_SPEED:
      if (value == null) {
        unsetOutSpeed();
      } else {
        setOutSpeed((Double)value);
      }
      break;

    case SPEED:
      if (value == null) {
        unsetSpeed();
      } else {
        setSpeed((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IN_SPEED:
      return Double.valueOf(getInSpeed());

    case OUT_SPEED:
      return Double.valueOf(getOutSpeed());

    case SPEED:
      return Long.valueOf(getSpeed());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IN_SPEED:
      return isSetInSpeed();
    case OUT_SPEED:
      return isSetOutSpeed();
    case SPEED:
      return isSetSpeed();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TNetLoad)
      return this.equals((TNetLoad)that);
    return false;
  }

  public boolean equals(TNetLoad that) {
    if (that == null)
      return false;

    boolean this_present_inSpeed = true && this.isSetInSpeed();
    boolean that_present_inSpeed = true && that.isSetInSpeed();
    if (this_present_inSpeed || that_present_inSpeed) {
      if (!(this_present_inSpeed && that_present_inSpeed))
        return false;
      if (this.inSpeed != that.inSpeed)
        return false;
    }

    boolean this_present_outSpeed = true && this.isSetOutSpeed();
    boolean that_present_outSpeed = true && that.isSetOutSpeed();
    if (this_present_outSpeed || that_present_outSpeed) {
      if (!(this_present_outSpeed && that_present_outSpeed))
        return false;
      if (this.outSpeed != that.outSpeed)
        return false;
    }

    boolean this_present_speed = true && this.isSetSpeed();
    boolean that_present_speed = true && that.isSetSpeed();
    if (this_present_speed || that_present_speed) {
      if (!(this_present_speed && that_present_speed))
        return false;
      if (this.speed != that.speed)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_inSpeed = true && (isSetInSpeed());
    list.add(present_inSpeed);
    if (present_inSpeed)
      list.add(inSpeed);

    boolean present_outSpeed = true && (isSetOutSpeed());
    list.add(present_outSpeed);
    if (present_outSpeed)
      list.add(outSpeed);

    boolean present_speed = true && (isSetSpeed());
    list.add(present_speed);
    if (present_speed)
      list.add(speed);

    return list.hashCode();
  }

  @Override
  public int compareTo(TNetLoad other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInSpeed()).compareTo(other.isSetInSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inSpeed, other.inSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutSpeed()).compareTo(other.isSetOutSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outSpeed, other.outSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpeed()).compareTo(other.isSetSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speed, other.speed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TNetLoad(");
    boolean first = true;

    if (isSetInSpeed()) {
      sb.append("inSpeed:");
      sb.append(this.inSpeed);
      first = false;
    }
    if (isSetOutSpeed()) {
      if (!first) sb.append(", ");
      sb.append("outSpeed:");
      sb.append(this.outSpeed);
      first = false;
    }
    if (isSetSpeed()) {
      if (!first) sb.append(", ");
      sb.append("speed:");
      sb.append(this.speed);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNetLoadStandardSchemeFactory implements SchemeFactory {
    public TNetLoadStandardScheme getScheme() {
      return new TNetLoadStandardScheme();
    }
  }

  private static class TNetLoadStandardScheme extends StandardScheme<TNetLoad> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TNetLoad struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 11: // IN_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.inSpeed = iprot.readDouble();
              struct.setInSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OUT_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.outSpeed = iprot.readDouble();
              struct.setOutSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.speed = iprot.readI64();
              struct.setSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TNetLoad struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetInSpeed()) {
        oprot.writeFieldBegin(IN_SPEED_FIELD_DESC);
        oprot.writeDouble(struct.inSpeed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOutSpeed()) {
        oprot.writeFieldBegin(OUT_SPEED_FIELD_DESC);
        oprot.writeDouble(struct.outSpeed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpeed()) {
        oprot.writeFieldBegin(SPEED_FIELD_DESC);
        oprot.writeI64(struct.speed);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNetLoadTupleSchemeFactory implements SchemeFactory {
    public TNetLoadTupleScheme getScheme() {
      return new TNetLoadTupleScheme();
    }
  }

  private static class TNetLoadTupleScheme extends TupleScheme<TNetLoad> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNetLoad struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInSpeed()) {
        optionals.set(0);
      }
      if (struct.isSetOutSpeed()) {
        optionals.set(1);
      }
      if (struct.isSetSpeed()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetInSpeed()) {
        oprot.writeDouble(struct.inSpeed);
      }
      if (struct.isSetOutSpeed()) {
        oprot.writeDouble(struct.outSpeed);
      }
      if (struct.isSetSpeed()) {
        oprot.writeI64(struct.speed);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNetLoad struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.inSpeed = iprot.readDouble();
        struct.setInSpeedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.outSpeed = iprot.readDouble();
        struct.setOutSpeedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.speed = iprot.readI64();
        struct.setSpeedIsSet(true);
      }
    }
  }

}

