/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.navercorp.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-8")
public class TMemInfo implements org.apache.thrift.TBase<TMemInfo, TMemInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TMemInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMemInfo");

  private static final org.apache.thrift.protocol.TField MEM_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("memTotal", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MEM_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("memFree", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MEM_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("memUsed", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SWAP_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("swapTotal", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SWAP_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("swapFree", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SWAP_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("swapUsed", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField VM_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("vmTotal", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField VM_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("vmFree", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField VM_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("vmUsed", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMemInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMemInfoTupleSchemeFactory());
  }

  private long memTotal; // optional
  private long memFree; // optional
  private long memUsed; // optional
  private long swapTotal; // optional
  private long swapFree; // optional
  private long swapUsed; // optional
  private long vmTotal; // optional
  private long vmFree; // optional
  private long vmUsed; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEM_TOTAL((short)1, "memTotal"),
    MEM_FREE((short)2, "memFree"),
    MEM_USED((short)3, "memUsed"),
    SWAP_TOTAL((short)4, "swapTotal"),
    SWAP_FREE((short)5, "swapFree"),
    SWAP_USED((short)6, "swapUsed"),
    VM_TOTAL((short)7, "vmTotal"),
    VM_FREE((short)8, "vmFree"),
    VM_USED((short)9, "vmUsed");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEM_TOTAL
          return MEM_TOTAL;
        case 2: // MEM_FREE
          return MEM_FREE;
        case 3: // MEM_USED
          return MEM_USED;
        case 4: // SWAP_TOTAL
          return SWAP_TOTAL;
        case 5: // SWAP_FREE
          return SWAP_FREE;
        case 6: // SWAP_USED
          return SWAP_USED;
        case 7: // VM_TOTAL
          return VM_TOTAL;
        case 8: // VM_FREE
          return VM_FREE;
        case 9: // VM_USED
          return VM_USED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMTOTAL_ISSET_ID = 0;
  private static final int __MEMFREE_ISSET_ID = 1;
  private static final int __MEMUSED_ISSET_ID = 2;
  private static final int __SWAPTOTAL_ISSET_ID = 3;
  private static final int __SWAPFREE_ISSET_ID = 4;
  private static final int __SWAPUSED_ISSET_ID = 5;
  private static final int __VMTOTAL_ISSET_ID = 6;
  private static final int __VMFREE_ISSET_ID = 7;
  private static final int __VMUSED_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MEM_TOTAL,_Fields.MEM_FREE,_Fields.MEM_USED,_Fields.SWAP_TOTAL,_Fields.SWAP_FREE,_Fields.SWAP_USED,_Fields.VM_TOTAL,_Fields.VM_FREE,_Fields.VM_USED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEM_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("memTotal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEM_FREE, new org.apache.thrift.meta_data.FieldMetaData("memFree", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEM_USED, new org.apache.thrift.meta_data.FieldMetaData("memUsed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SWAP_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("swapTotal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SWAP_FREE, new org.apache.thrift.meta_data.FieldMetaData("swapFree", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SWAP_USED, new org.apache.thrift.meta_data.FieldMetaData("swapUsed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VM_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("vmTotal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VM_FREE, new org.apache.thrift.meta_data.FieldMetaData("vmFree", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VM_USED, new org.apache.thrift.meta_data.FieldMetaData("vmUsed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMemInfo.class, metaDataMap);
  }

  public TMemInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMemInfo(TMemInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.memTotal = other.memTotal;
    this.memFree = other.memFree;
    this.memUsed = other.memUsed;
    this.swapTotal = other.swapTotal;
    this.swapFree = other.swapFree;
    this.swapUsed = other.swapUsed;
    this.vmTotal = other.vmTotal;
    this.vmFree = other.vmFree;
    this.vmUsed = other.vmUsed;
  }

  public TMemInfo deepCopy() {
    return new TMemInfo(this);
  }

  @Override
  public void clear() {
    setMemTotalIsSet(false);
    this.memTotal = 0;
    setMemFreeIsSet(false);
    this.memFree = 0;
    setMemUsedIsSet(false);
    this.memUsed = 0;
    setSwapTotalIsSet(false);
    this.swapTotal = 0;
    setSwapFreeIsSet(false);
    this.swapFree = 0;
    setSwapUsedIsSet(false);
    this.swapUsed = 0;
    setVmTotalIsSet(false);
    this.vmTotal = 0;
    setVmFreeIsSet(false);
    this.vmFree = 0;
    setVmUsedIsSet(false);
    this.vmUsed = 0;
  }

  public long getMemTotal() {
    return this.memTotal;
  }

  public void setMemTotal(long memTotal) {
    this.memTotal = memTotal;
    setMemTotalIsSet(true);
  }

  public void unsetMemTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMTOTAL_ISSET_ID);
  }

  /** Returns true if field memTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetMemTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMTOTAL_ISSET_ID);
  }

  public void setMemTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMTOTAL_ISSET_ID, value);
  }

  public long getMemFree() {
    return this.memFree;
  }

  public void setMemFree(long memFree) {
    this.memFree = memFree;
    setMemFreeIsSet(true);
  }

  public void unsetMemFree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMFREE_ISSET_ID);
  }

  /** Returns true if field memFree is set (has been assigned a value) and false otherwise */
  public boolean isSetMemFree() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMFREE_ISSET_ID);
  }

  public void setMemFreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMFREE_ISSET_ID, value);
  }

  public long getMemUsed() {
    return this.memUsed;
  }

  public void setMemUsed(long memUsed) {
    this.memUsed = memUsed;
    setMemUsedIsSet(true);
  }

  public void unsetMemUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMUSED_ISSET_ID);
  }

  /** Returns true if field memUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetMemUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMUSED_ISSET_ID);
  }

  public void setMemUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMUSED_ISSET_ID, value);
  }

  public long getSwapTotal() {
    return this.swapTotal;
  }

  public void setSwapTotal(long swapTotal) {
    this.swapTotal = swapTotal;
    setSwapTotalIsSet(true);
  }

  public void unsetSwapTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SWAPTOTAL_ISSET_ID);
  }

  /** Returns true if field swapTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetSwapTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __SWAPTOTAL_ISSET_ID);
  }

  public void setSwapTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SWAPTOTAL_ISSET_ID, value);
  }

  public long getSwapFree() {
    return this.swapFree;
  }

  public void setSwapFree(long swapFree) {
    this.swapFree = swapFree;
    setSwapFreeIsSet(true);
  }

  public void unsetSwapFree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SWAPFREE_ISSET_ID);
  }

  /** Returns true if field swapFree is set (has been assigned a value) and false otherwise */
  public boolean isSetSwapFree() {
    return EncodingUtils.testBit(__isset_bitfield, __SWAPFREE_ISSET_ID);
  }

  public void setSwapFreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SWAPFREE_ISSET_ID, value);
  }

  public long getSwapUsed() {
    return this.swapUsed;
  }

  public void setSwapUsed(long swapUsed) {
    this.swapUsed = swapUsed;
    setSwapUsedIsSet(true);
  }

  public void unsetSwapUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SWAPUSED_ISSET_ID);
  }

  /** Returns true if field swapUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetSwapUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __SWAPUSED_ISSET_ID);
  }

  public void setSwapUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SWAPUSED_ISSET_ID, value);
  }

  public long getVmTotal() {
    return this.vmTotal;
  }

  public void setVmTotal(long vmTotal) {
    this.vmTotal = vmTotal;
    setVmTotalIsSet(true);
  }

  public void unsetVmTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VMTOTAL_ISSET_ID);
  }

  /** Returns true if field vmTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetVmTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __VMTOTAL_ISSET_ID);
  }

  public void setVmTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VMTOTAL_ISSET_ID, value);
  }

  public long getVmFree() {
    return this.vmFree;
  }

  public void setVmFree(long vmFree) {
    this.vmFree = vmFree;
    setVmFreeIsSet(true);
  }

  public void unsetVmFree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VMFREE_ISSET_ID);
  }

  /** Returns true if field vmFree is set (has been assigned a value) and false otherwise */
  public boolean isSetVmFree() {
    return EncodingUtils.testBit(__isset_bitfield, __VMFREE_ISSET_ID);
  }

  public void setVmFreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VMFREE_ISSET_ID, value);
  }

  public long getVmUsed() {
    return this.vmUsed;
  }

  public void setVmUsed(long vmUsed) {
    this.vmUsed = vmUsed;
    setVmUsedIsSet(true);
  }

  public void unsetVmUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VMUSED_ISSET_ID);
  }

  /** Returns true if field vmUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetVmUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __VMUSED_ISSET_ID);
  }

  public void setVmUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VMUSED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEM_TOTAL:
      if (value == null) {
        unsetMemTotal();
      } else {
        setMemTotal((Long)value);
      }
      break;

    case MEM_FREE:
      if (value == null) {
        unsetMemFree();
      } else {
        setMemFree((Long)value);
      }
      break;

    case MEM_USED:
      if (value == null) {
        unsetMemUsed();
      } else {
        setMemUsed((Long)value);
      }
      break;

    case SWAP_TOTAL:
      if (value == null) {
        unsetSwapTotal();
      } else {
        setSwapTotal((Long)value);
      }
      break;

    case SWAP_FREE:
      if (value == null) {
        unsetSwapFree();
      } else {
        setSwapFree((Long)value);
      }
      break;

    case SWAP_USED:
      if (value == null) {
        unsetSwapUsed();
      } else {
        setSwapUsed((Long)value);
      }
      break;

    case VM_TOTAL:
      if (value == null) {
        unsetVmTotal();
      } else {
        setVmTotal((Long)value);
      }
      break;

    case VM_FREE:
      if (value == null) {
        unsetVmFree();
      } else {
        setVmFree((Long)value);
      }
      break;

    case VM_USED:
      if (value == null) {
        unsetVmUsed();
      } else {
        setVmUsed((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEM_TOTAL:
      return Long.valueOf(getMemTotal());

    case MEM_FREE:
      return Long.valueOf(getMemFree());

    case MEM_USED:
      return Long.valueOf(getMemUsed());

    case SWAP_TOTAL:
      return Long.valueOf(getSwapTotal());

    case SWAP_FREE:
      return Long.valueOf(getSwapFree());

    case SWAP_USED:
      return Long.valueOf(getSwapUsed());

    case VM_TOTAL:
      return Long.valueOf(getVmTotal());

    case VM_FREE:
      return Long.valueOf(getVmFree());

    case VM_USED:
      return Long.valueOf(getVmUsed());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEM_TOTAL:
      return isSetMemTotal();
    case MEM_FREE:
      return isSetMemFree();
    case MEM_USED:
      return isSetMemUsed();
    case SWAP_TOTAL:
      return isSetSwapTotal();
    case SWAP_FREE:
      return isSetSwapFree();
    case SWAP_USED:
      return isSetSwapUsed();
    case VM_TOTAL:
      return isSetVmTotal();
    case VM_FREE:
      return isSetVmFree();
    case VM_USED:
      return isSetVmUsed();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMemInfo)
      return this.equals((TMemInfo)that);
    return false;
  }

  public boolean equals(TMemInfo that) {
    if (that == null)
      return false;

    boolean this_present_memTotal = true && this.isSetMemTotal();
    boolean that_present_memTotal = true && that.isSetMemTotal();
    if (this_present_memTotal || that_present_memTotal) {
      if (!(this_present_memTotal && that_present_memTotal))
        return false;
      if (this.memTotal != that.memTotal)
        return false;
    }

    boolean this_present_memFree = true && this.isSetMemFree();
    boolean that_present_memFree = true && that.isSetMemFree();
    if (this_present_memFree || that_present_memFree) {
      if (!(this_present_memFree && that_present_memFree))
        return false;
      if (this.memFree != that.memFree)
        return false;
    }

    boolean this_present_memUsed = true && this.isSetMemUsed();
    boolean that_present_memUsed = true && that.isSetMemUsed();
    if (this_present_memUsed || that_present_memUsed) {
      if (!(this_present_memUsed && that_present_memUsed))
        return false;
      if (this.memUsed != that.memUsed)
        return false;
    }

    boolean this_present_swapTotal = true && this.isSetSwapTotal();
    boolean that_present_swapTotal = true && that.isSetSwapTotal();
    if (this_present_swapTotal || that_present_swapTotal) {
      if (!(this_present_swapTotal && that_present_swapTotal))
        return false;
      if (this.swapTotal != that.swapTotal)
        return false;
    }

    boolean this_present_swapFree = true && this.isSetSwapFree();
    boolean that_present_swapFree = true && that.isSetSwapFree();
    if (this_present_swapFree || that_present_swapFree) {
      if (!(this_present_swapFree && that_present_swapFree))
        return false;
      if (this.swapFree != that.swapFree)
        return false;
    }

    boolean this_present_swapUsed = true && this.isSetSwapUsed();
    boolean that_present_swapUsed = true && that.isSetSwapUsed();
    if (this_present_swapUsed || that_present_swapUsed) {
      if (!(this_present_swapUsed && that_present_swapUsed))
        return false;
      if (this.swapUsed != that.swapUsed)
        return false;
    }

    boolean this_present_vmTotal = true && this.isSetVmTotal();
    boolean that_present_vmTotal = true && that.isSetVmTotal();
    if (this_present_vmTotal || that_present_vmTotal) {
      if (!(this_present_vmTotal && that_present_vmTotal))
        return false;
      if (this.vmTotal != that.vmTotal)
        return false;
    }

    boolean this_present_vmFree = true && this.isSetVmFree();
    boolean that_present_vmFree = true && that.isSetVmFree();
    if (this_present_vmFree || that_present_vmFree) {
      if (!(this_present_vmFree && that_present_vmFree))
        return false;
      if (this.vmFree != that.vmFree)
        return false;
    }

    boolean this_present_vmUsed = true && this.isSetVmUsed();
    boolean that_present_vmUsed = true && that.isSetVmUsed();
    if (this_present_vmUsed || that_present_vmUsed) {
      if (!(this_present_vmUsed && that_present_vmUsed))
        return false;
      if (this.vmUsed != that.vmUsed)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_memTotal = true && (isSetMemTotal());
    list.add(present_memTotal);
    if (present_memTotal)
      list.add(memTotal);

    boolean present_memFree = true && (isSetMemFree());
    list.add(present_memFree);
    if (present_memFree)
      list.add(memFree);

    boolean present_memUsed = true && (isSetMemUsed());
    list.add(present_memUsed);
    if (present_memUsed)
      list.add(memUsed);

    boolean present_swapTotal = true && (isSetSwapTotal());
    list.add(present_swapTotal);
    if (present_swapTotal)
      list.add(swapTotal);

    boolean present_swapFree = true && (isSetSwapFree());
    list.add(present_swapFree);
    if (present_swapFree)
      list.add(swapFree);

    boolean present_swapUsed = true && (isSetSwapUsed());
    list.add(present_swapUsed);
    if (present_swapUsed)
      list.add(swapUsed);

    boolean present_vmTotal = true && (isSetVmTotal());
    list.add(present_vmTotal);
    if (present_vmTotal)
      list.add(vmTotal);

    boolean present_vmFree = true && (isSetVmFree());
    list.add(present_vmFree);
    if (present_vmFree)
      list.add(vmFree);

    boolean present_vmUsed = true && (isSetVmUsed());
    list.add(present_vmUsed);
    if (present_vmUsed)
      list.add(vmUsed);

    return list.hashCode();
  }

  @Override
  public int compareTo(TMemInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMemTotal()).compareTo(other.isSetMemTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memTotal, other.memTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemFree()).compareTo(other.isSetMemFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memFree, other.memFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemUsed()).compareTo(other.isSetMemUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memUsed, other.memUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSwapTotal()).compareTo(other.isSetSwapTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwapTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swapTotal, other.swapTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSwapFree()).compareTo(other.isSetSwapFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwapFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swapFree, other.swapFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSwapUsed()).compareTo(other.isSetSwapUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwapUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swapUsed, other.swapUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVmTotal()).compareTo(other.isSetVmTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVmTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vmTotal, other.vmTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVmFree()).compareTo(other.isSetVmFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVmFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vmFree, other.vmFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVmUsed()).compareTo(other.isSetVmUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVmUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vmUsed, other.vmUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMemInfo(");
    boolean first = true;

    if (isSetMemTotal()) {
      sb.append("memTotal:");
      sb.append(this.memTotal);
      first = false;
    }
    if (isSetMemFree()) {
      if (!first) sb.append(", ");
      sb.append("memFree:");
      sb.append(this.memFree);
      first = false;
    }
    if (isSetMemUsed()) {
      if (!first) sb.append(", ");
      sb.append("memUsed:");
      sb.append(this.memUsed);
      first = false;
    }
    if (isSetSwapTotal()) {
      if (!first) sb.append(", ");
      sb.append("swapTotal:");
      sb.append(this.swapTotal);
      first = false;
    }
    if (isSetSwapFree()) {
      if (!first) sb.append(", ");
      sb.append("swapFree:");
      sb.append(this.swapFree);
      first = false;
    }
    if (isSetSwapUsed()) {
      if (!first) sb.append(", ");
      sb.append("swapUsed:");
      sb.append(this.swapUsed);
      first = false;
    }
    if (isSetVmTotal()) {
      if (!first) sb.append(", ");
      sb.append("vmTotal:");
      sb.append(this.vmTotal);
      first = false;
    }
    if (isSetVmFree()) {
      if (!first) sb.append(", ");
      sb.append("vmFree:");
      sb.append(this.vmFree);
      first = false;
    }
    if (isSetVmUsed()) {
      if (!first) sb.append(", ");
      sb.append("vmUsed:");
      sb.append(this.vmUsed);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMemInfoStandardSchemeFactory implements SchemeFactory {
    public TMemInfoStandardScheme getScheme() {
      return new TMemInfoStandardScheme();
    }
  }

  private static class TMemInfoStandardScheme extends StandardScheme<TMemInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMemInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEM_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memTotal = iprot.readI64();
              struct.setMemTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEM_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memFree = iprot.readI64();
              struct.setMemFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEM_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memUsed = iprot.readI64();
              struct.setMemUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SWAP_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.swapTotal = iprot.readI64();
              struct.setSwapTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SWAP_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.swapFree = iprot.readI64();
              struct.setSwapFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SWAP_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.swapUsed = iprot.readI64();
              struct.setSwapUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VM_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.vmTotal = iprot.readI64();
              struct.setVmTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VM_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.vmFree = iprot.readI64();
              struct.setVmFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VM_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.vmUsed = iprot.readI64();
              struct.setVmUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMemInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetMemTotal()) {
        oprot.writeFieldBegin(MEM_TOTAL_FIELD_DESC);
        oprot.writeI64(struct.memTotal);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemFree()) {
        oprot.writeFieldBegin(MEM_FREE_FIELD_DESC);
        oprot.writeI64(struct.memFree);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemUsed()) {
        oprot.writeFieldBegin(MEM_USED_FIELD_DESC);
        oprot.writeI64(struct.memUsed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSwapTotal()) {
        oprot.writeFieldBegin(SWAP_TOTAL_FIELD_DESC);
        oprot.writeI64(struct.swapTotal);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSwapFree()) {
        oprot.writeFieldBegin(SWAP_FREE_FIELD_DESC);
        oprot.writeI64(struct.swapFree);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSwapUsed()) {
        oprot.writeFieldBegin(SWAP_USED_FIELD_DESC);
        oprot.writeI64(struct.swapUsed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVmTotal()) {
        oprot.writeFieldBegin(VM_TOTAL_FIELD_DESC);
        oprot.writeI64(struct.vmTotal);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVmFree()) {
        oprot.writeFieldBegin(VM_FREE_FIELD_DESC);
        oprot.writeI64(struct.vmFree);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVmUsed()) {
        oprot.writeFieldBegin(VM_USED_FIELD_DESC);
        oprot.writeI64(struct.vmUsed);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMemInfoTupleSchemeFactory implements SchemeFactory {
    public TMemInfoTupleScheme getScheme() {
      return new TMemInfoTupleScheme();
    }
  }

  private static class TMemInfoTupleScheme extends TupleScheme<TMemInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMemInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMemTotal()) {
        optionals.set(0);
      }
      if (struct.isSetMemFree()) {
        optionals.set(1);
      }
      if (struct.isSetMemUsed()) {
        optionals.set(2);
      }
      if (struct.isSetSwapTotal()) {
        optionals.set(3);
      }
      if (struct.isSetSwapFree()) {
        optionals.set(4);
      }
      if (struct.isSetSwapUsed()) {
        optionals.set(5);
      }
      if (struct.isSetVmTotal()) {
        optionals.set(6);
      }
      if (struct.isSetVmFree()) {
        optionals.set(7);
      }
      if (struct.isSetVmUsed()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetMemTotal()) {
        oprot.writeI64(struct.memTotal);
      }
      if (struct.isSetMemFree()) {
        oprot.writeI64(struct.memFree);
      }
      if (struct.isSetMemUsed()) {
        oprot.writeI64(struct.memUsed);
      }
      if (struct.isSetSwapTotal()) {
        oprot.writeI64(struct.swapTotal);
      }
      if (struct.isSetSwapFree()) {
        oprot.writeI64(struct.swapFree);
      }
      if (struct.isSetSwapUsed()) {
        oprot.writeI64(struct.swapUsed);
      }
      if (struct.isSetVmTotal()) {
        oprot.writeI64(struct.vmTotal);
      }
      if (struct.isSetVmFree()) {
        oprot.writeI64(struct.vmFree);
      }
      if (struct.isSetVmUsed()) {
        oprot.writeI64(struct.vmUsed);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMemInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.memTotal = iprot.readI64();
        struct.setMemTotalIsSet(true);
      }
      if (incoming.get(1)) {
        struct.memFree = iprot.readI64();
        struct.setMemFreeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.memUsed = iprot.readI64();
        struct.setMemUsedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.swapTotal = iprot.readI64();
        struct.setSwapTotalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.swapFree = iprot.readI64();
        struct.setSwapFreeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.swapUsed = iprot.readI64();
        struct.setSwapUsedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.vmTotal = iprot.readI64();
        struct.setVmTotalIsSet(true);
      }
      if (incoming.get(7)) {
        struct.vmFree = iprot.readI64();
        struct.setVmFreeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.vmUsed = iprot.readI64();
        struct.setVmUsedIsSet(true);
      }
    }
  }

}

