/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.navercorp.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-14")
public class TCpus implements org.apache.thrift.TBase<TCpus, TCpus._Fields>, java.io.Serializable, Cloneable, Comparable<TCpus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCpus");

  private static final org.apache.thrift.protocol.TField T_CPU_INFO_STATICS_FIELD_DESC = new org.apache.thrift.protocol.TField("tCpuInfoStatics", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField T_CPU_INFO_DYNAMICS_FIELD_DESC = new org.apache.thrift.protocol.TField("tCpuInfoDynamics", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCpusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCpusTupleSchemeFactory());
  }

  private List<TCpuInfoStatic> tCpuInfoStatics; // required
  private List<TCpuInfoDynamic> tCpuInfoDynamics; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    T_CPU_INFO_STATICS((short)1, "tCpuInfoStatics"),
    T_CPU_INFO_DYNAMICS((short)2, "tCpuInfoDynamics");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // T_CPU_INFO_STATICS
          return T_CPU_INFO_STATICS;
        case 2: // T_CPU_INFO_DYNAMICS
          return T_CPU_INFO_DYNAMICS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.T_CPU_INFO_STATICS, new org.apache.thrift.meta_data.FieldMetaData("tCpuInfoStatics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCpuInfoStatic.class))));
    tmpMap.put(_Fields.T_CPU_INFO_DYNAMICS, new org.apache.thrift.meta_data.FieldMetaData("tCpuInfoDynamics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCpuInfoDynamic.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCpus.class, metaDataMap);
  }

  public TCpus() {
  }

  public TCpus(
    List<TCpuInfoStatic> tCpuInfoStatics,
    List<TCpuInfoDynamic> tCpuInfoDynamics)
  {
    this();
    this.tCpuInfoStatics = tCpuInfoStatics;
    this.tCpuInfoDynamics = tCpuInfoDynamics;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCpus(TCpus other) {
    if (other.isSetTCpuInfoStatics()) {
      List<TCpuInfoStatic> __this__tCpuInfoStatics = new ArrayList<TCpuInfoStatic>(other.tCpuInfoStatics.size());
      for (TCpuInfoStatic other_element : other.tCpuInfoStatics) {
        __this__tCpuInfoStatics.add(new TCpuInfoStatic(other_element));
      }
      this.tCpuInfoStatics = __this__tCpuInfoStatics;
    }
    if (other.isSetTCpuInfoDynamics()) {
      List<TCpuInfoDynamic> __this__tCpuInfoDynamics = new ArrayList<TCpuInfoDynamic>(other.tCpuInfoDynamics.size());
      for (TCpuInfoDynamic other_element : other.tCpuInfoDynamics) {
        __this__tCpuInfoDynamics.add(new TCpuInfoDynamic(other_element));
      }
      this.tCpuInfoDynamics = __this__tCpuInfoDynamics;
    }
  }

  public TCpus deepCopy() {
    return new TCpus(this);
  }

  @Override
  public void clear() {
    this.tCpuInfoStatics = null;
    this.tCpuInfoDynamics = null;
  }

  public int getTCpuInfoStaticsSize() {
    return (this.tCpuInfoStatics == null) ? 0 : this.tCpuInfoStatics.size();
  }

  public java.util.Iterator<TCpuInfoStatic> getTCpuInfoStaticsIterator() {
    return (this.tCpuInfoStatics == null) ? null : this.tCpuInfoStatics.iterator();
  }

  public void addToTCpuInfoStatics(TCpuInfoStatic elem) {
    if (this.tCpuInfoStatics == null) {
      this.tCpuInfoStatics = new ArrayList<TCpuInfoStatic>();
    }
    this.tCpuInfoStatics.add(elem);
  }

  public List<TCpuInfoStatic> getTCpuInfoStatics() {
    return this.tCpuInfoStatics;
  }

  public void setTCpuInfoStatics(List<TCpuInfoStatic> tCpuInfoStatics) {
    this.tCpuInfoStatics = tCpuInfoStatics;
  }

  public void unsetTCpuInfoStatics() {
    this.tCpuInfoStatics = null;
  }

  /** Returns true if field tCpuInfoStatics is set (has been assigned a value) and false otherwise */
  public boolean isSetTCpuInfoStatics() {
    return this.tCpuInfoStatics != null;
  }

  public void setTCpuInfoStaticsIsSet(boolean value) {
    if (!value) {
      this.tCpuInfoStatics = null;
    }
  }

  public int getTCpuInfoDynamicsSize() {
    return (this.tCpuInfoDynamics == null) ? 0 : this.tCpuInfoDynamics.size();
  }

  public java.util.Iterator<TCpuInfoDynamic> getTCpuInfoDynamicsIterator() {
    return (this.tCpuInfoDynamics == null) ? null : this.tCpuInfoDynamics.iterator();
  }

  public void addToTCpuInfoDynamics(TCpuInfoDynamic elem) {
    if (this.tCpuInfoDynamics == null) {
      this.tCpuInfoDynamics = new ArrayList<TCpuInfoDynamic>();
    }
    this.tCpuInfoDynamics.add(elem);
  }

  public List<TCpuInfoDynamic> getTCpuInfoDynamics() {
    return this.tCpuInfoDynamics;
  }

  public void setTCpuInfoDynamics(List<TCpuInfoDynamic> tCpuInfoDynamics) {
    this.tCpuInfoDynamics = tCpuInfoDynamics;
  }

  public void unsetTCpuInfoDynamics() {
    this.tCpuInfoDynamics = null;
  }

  /** Returns true if field tCpuInfoDynamics is set (has been assigned a value) and false otherwise */
  public boolean isSetTCpuInfoDynamics() {
    return this.tCpuInfoDynamics != null;
  }

  public void setTCpuInfoDynamicsIsSet(boolean value) {
    if (!value) {
      this.tCpuInfoDynamics = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case T_CPU_INFO_STATICS:
      if (value == null) {
        unsetTCpuInfoStatics();
      } else {
        setTCpuInfoStatics((List<TCpuInfoStatic>)value);
      }
      break;

    case T_CPU_INFO_DYNAMICS:
      if (value == null) {
        unsetTCpuInfoDynamics();
      } else {
        setTCpuInfoDynamics((List<TCpuInfoDynamic>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case T_CPU_INFO_STATICS:
      return getTCpuInfoStatics();

    case T_CPU_INFO_DYNAMICS:
      return getTCpuInfoDynamics();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case T_CPU_INFO_STATICS:
      return isSetTCpuInfoStatics();
    case T_CPU_INFO_DYNAMICS:
      return isSetTCpuInfoDynamics();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCpus)
      return this.equals((TCpus)that);
    return false;
  }

  public boolean equals(TCpus that) {
    if (that == null)
      return false;

    boolean this_present_tCpuInfoStatics = true && this.isSetTCpuInfoStatics();
    boolean that_present_tCpuInfoStatics = true && that.isSetTCpuInfoStatics();
    if (this_present_tCpuInfoStatics || that_present_tCpuInfoStatics) {
      if (!(this_present_tCpuInfoStatics && that_present_tCpuInfoStatics))
        return false;
      if (!this.tCpuInfoStatics.equals(that.tCpuInfoStatics))
        return false;
    }

    boolean this_present_tCpuInfoDynamics = true && this.isSetTCpuInfoDynamics();
    boolean that_present_tCpuInfoDynamics = true && that.isSetTCpuInfoDynamics();
    if (this_present_tCpuInfoDynamics || that_present_tCpuInfoDynamics) {
      if (!(this_present_tCpuInfoDynamics && that_present_tCpuInfoDynamics))
        return false;
      if (!this.tCpuInfoDynamics.equals(that.tCpuInfoDynamics))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tCpuInfoStatics = true && (isSetTCpuInfoStatics());
    list.add(present_tCpuInfoStatics);
    if (present_tCpuInfoStatics)
      list.add(tCpuInfoStatics);

    boolean present_tCpuInfoDynamics = true && (isSetTCpuInfoDynamics());
    list.add(present_tCpuInfoDynamics);
    if (present_tCpuInfoDynamics)
      list.add(tCpuInfoDynamics);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCpus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTCpuInfoStatics()).compareTo(other.isSetTCpuInfoStatics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTCpuInfoStatics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tCpuInfoStatics, other.tCpuInfoStatics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTCpuInfoDynamics()).compareTo(other.isSetTCpuInfoDynamics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTCpuInfoDynamics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tCpuInfoDynamics, other.tCpuInfoDynamics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCpus(");
    boolean first = true;

    sb.append("tCpuInfoStatics:");
    if (this.tCpuInfoStatics == null) {
      sb.append("null");
    } else {
      sb.append(this.tCpuInfoStatics);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tCpuInfoDynamics:");
    if (this.tCpuInfoDynamics == null) {
      sb.append("null");
    } else {
      sb.append(this.tCpuInfoDynamics);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCpusStandardSchemeFactory implements SchemeFactory {
    public TCpusStandardScheme getScheme() {
      return new TCpusStandardScheme();
    }
  }

  private static class TCpusStandardScheme extends StandardScheme<TCpus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCpus struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // T_CPU_INFO_STATICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.tCpuInfoStatics = new ArrayList<TCpuInfoStatic>(_list56.size);
                TCpuInfoStatic _elem57;
                for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                {
                  _elem57 = new TCpuInfoStatic();
                  _elem57.read(iprot);
                  struct.tCpuInfoStatics.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setTCpuInfoStaticsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // T_CPU_INFO_DYNAMICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list59 = iprot.readListBegin();
                struct.tCpuInfoDynamics = new ArrayList<TCpuInfoDynamic>(_list59.size);
                TCpuInfoDynamic _elem60;
                for (int _i61 = 0; _i61 < _list59.size; ++_i61)
                {
                  _elem60 = new TCpuInfoDynamic();
                  _elem60.read(iprot);
                  struct.tCpuInfoDynamics.add(_elem60);
                }
                iprot.readListEnd();
              }
              struct.setTCpuInfoDynamicsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCpus struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tCpuInfoStatics != null) {
        oprot.writeFieldBegin(T_CPU_INFO_STATICS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tCpuInfoStatics.size()));
          for (TCpuInfoStatic _iter62 : struct.tCpuInfoStatics)
          {
            _iter62.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tCpuInfoDynamics != null) {
        oprot.writeFieldBegin(T_CPU_INFO_DYNAMICS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tCpuInfoDynamics.size()));
          for (TCpuInfoDynamic _iter63 : struct.tCpuInfoDynamics)
          {
            _iter63.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCpusTupleSchemeFactory implements SchemeFactory {
    public TCpusTupleScheme getScheme() {
      return new TCpusTupleScheme();
    }
  }

  private static class TCpusTupleScheme extends TupleScheme<TCpus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCpus struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTCpuInfoStatics()) {
        optionals.set(0);
      }
      if (struct.isSetTCpuInfoDynamics()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTCpuInfoStatics()) {
        {
          oprot.writeI32(struct.tCpuInfoStatics.size());
          for (TCpuInfoStatic _iter64 : struct.tCpuInfoStatics)
          {
            _iter64.write(oprot);
          }
        }
      }
      if (struct.isSetTCpuInfoDynamics()) {
        {
          oprot.writeI32(struct.tCpuInfoDynamics.size());
          for (TCpuInfoDynamic _iter65 : struct.tCpuInfoDynamics)
          {
            _iter65.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCpus struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tCpuInfoStatics = new ArrayList<TCpuInfoStatic>(_list66.size);
          TCpuInfoStatic _elem67;
          for (int _i68 = 0; _i68 < _list66.size; ++_i68)
          {
            _elem67 = new TCpuInfoStatic();
            _elem67.read(iprot);
            struct.tCpuInfoStatics.add(_elem67);
          }
        }
        struct.setTCpuInfoStaticsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tCpuInfoDynamics = new ArrayList<TCpuInfoDynamic>(_list69.size);
          TCpuInfoDynamic _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = new TCpuInfoDynamic();
            _elem70.read(iprot);
            struct.tCpuInfoDynamics.add(_elem70);
          }
        }
        struct.setTCpuInfoDynamicsIsSet(true);
      }
    }
  }

}

