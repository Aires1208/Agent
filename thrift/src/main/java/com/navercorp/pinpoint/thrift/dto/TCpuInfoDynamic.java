/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.navercorp.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-15")
public class TCpuInfoDynamic implements org.apache.thrift.TBase<TCpuInfoDynamic, TCpuInfoDynamic._Fields>, java.io.Serializable, Cloneable, Comparable<TCpuInfoDynamic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCpuInfoDynamic");

  private static final org.apache.thrift.protocol.TField PROCESSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("processor", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField NICE_FIELD_DESC = new org.apache.thrift.protocol.TField("nice", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("system", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField IDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("idle", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField IOWAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("iowait", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField IRQ_FIELD_DESC = new org.apache.thrift.protocol.TField("irq", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SOFTIRQ_FIELD_DESC = new org.apache.thrift.protocol.TField("softirq", org.apache.thrift.protocol.TType.I64, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCpuInfoDynamicStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCpuInfoDynamicTupleSchemeFactory());
  }

  private String processor; // optional
  private long user; // optional
  private long nice; // optional
  private long system; // optional
  private long idle; // optional
  private long iowait; // optional
  private long irq; // optional
  private long softirq; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROCESSOR((short)1, "processor"),
    USER((short)2, "user"),
    NICE((short)3, "nice"),
    SYSTEM((short)4, "system"),
    IDLE((short)5, "idle"),
    IOWAIT((short)6, "iowait"),
    IRQ((short)7, "irq"),
    SOFTIRQ((short)8, "softirq");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROCESSOR
          return PROCESSOR;
        case 2: // USER
          return USER;
        case 3: // NICE
          return NICE;
        case 4: // SYSTEM
          return SYSTEM;
        case 5: // IDLE
          return IDLE;
        case 6: // IOWAIT
          return IOWAIT;
        case 7: // IRQ
          return IRQ;
        case 8: // SOFTIRQ
          return SOFTIRQ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USER_ISSET_ID = 0;
  private static final int __NICE_ISSET_ID = 1;
  private static final int __SYSTEM_ISSET_ID = 2;
  private static final int __IDLE_ISSET_ID = 3;
  private static final int __IOWAIT_ISSET_ID = 4;
  private static final int __IRQ_ISSET_ID = 5;
  private static final int __SOFTIRQ_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PROCESSOR,_Fields.USER,_Fields.NICE,_Fields.SYSTEM,_Fields.IDLE,_Fields.IOWAIT,_Fields.IRQ,_Fields.SOFTIRQ};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROCESSOR, new org.apache.thrift.meta_data.FieldMetaData("processor", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NICE, new org.apache.thrift.meta_data.FieldMetaData("nice", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("system", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IDLE, new org.apache.thrift.meta_data.FieldMetaData("idle", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IOWAIT, new org.apache.thrift.meta_data.FieldMetaData("iowait", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IRQ, new org.apache.thrift.meta_data.FieldMetaData("irq", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SOFTIRQ, new org.apache.thrift.meta_data.FieldMetaData("softirq", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCpuInfoDynamic.class, metaDataMap);
  }

  public TCpuInfoDynamic() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCpuInfoDynamic(TCpuInfoDynamic other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProcessor()) {
      this.processor = other.processor;
    }
    this.user = other.user;
    this.nice = other.nice;
    this.system = other.system;
    this.idle = other.idle;
    this.iowait = other.iowait;
    this.irq = other.irq;
    this.softirq = other.softirq;
  }

  public TCpuInfoDynamic deepCopy() {
    return new TCpuInfoDynamic(this);
  }

  @Override
  public void clear() {
    this.processor = null;
    setUserIsSet(false);
    this.user = 0;
    setNiceIsSet(false);
    this.nice = 0;
    setSystemIsSet(false);
    this.system = 0;
    setIdleIsSet(false);
    this.idle = 0;
    setIowaitIsSet(false);
    this.iowait = 0;
    setIrqIsSet(false);
    this.irq = 0;
    setSoftirqIsSet(false);
    this.softirq = 0;
  }

  public String getProcessor() {
    return this.processor;
  }

  public void setProcessor(String processor) {
    this.processor = processor;
  }

  public void unsetProcessor() {
    this.processor = null;
  }

  /** Returns true if field processor is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessor() {
    return this.processor != null;
  }

  public void setProcessorIsSet(boolean value) {
    if (!value) {
      this.processor = null;
    }
  }

  public long getUser() {
    return this.user;
  }

  public void setUser(long user) {
    this.user = user;
    setUserIsSet(true);
  }

  public void unsetUser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_ISSET_ID);
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return EncodingUtils.testBit(__isset_bitfield, __USER_ISSET_ID);
  }

  public void setUserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_ISSET_ID, value);
  }

  public long getNice() {
    return this.nice;
  }

  public void setNice(long nice) {
    this.nice = nice;
    setNiceIsSet(true);
  }

  public void unsetNice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NICE_ISSET_ID);
  }

  /** Returns true if field nice is set (has been assigned a value) and false otherwise */
  public boolean isSetNice() {
    return EncodingUtils.testBit(__isset_bitfield, __NICE_ISSET_ID);
  }

  public void setNiceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NICE_ISSET_ID, value);
  }

  public long getSystem() {
    return this.system;
  }

  public void setSystem(long system) {
    this.system = system;
    setSystemIsSet(true);
  }

  public void unsetSystem() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYSTEM_ISSET_ID);
  }

  /** Returns true if field system is set (has been assigned a value) and false otherwise */
  public boolean isSetSystem() {
    return EncodingUtils.testBit(__isset_bitfield, __SYSTEM_ISSET_ID);
  }

  public void setSystemIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYSTEM_ISSET_ID, value);
  }

  public long getIdle() {
    return this.idle;
  }

  public void setIdle(long idle) {
    this.idle = idle;
    setIdleIsSet(true);
  }

  public void unsetIdle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDLE_ISSET_ID);
  }

  /** Returns true if field idle is set (has been assigned a value) and false otherwise */
  public boolean isSetIdle() {
    return EncodingUtils.testBit(__isset_bitfield, __IDLE_ISSET_ID);
  }

  public void setIdleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDLE_ISSET_ID, value);
  }

  public long getIowait() {
    return this.iowait;
  }

  public void setIowait(long iowait) {
    this.iowait = iowait;
    setIowaitIsSet(true);
  }

  public void unsetIowait() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IOWAIT_ISSET_ID);
  }

  /** Returns true if field iowait is set (has been assigned a value) and false otherwise */
  public boolean isSetIowait() {
    return EncodingUtils.testBit(__isset_bitfield, __IOWAIT_ISSET_ID);
  }

  public void setIowaitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IOWAIT_ISSET_ID, value);
  }

  public long getIrq() {
    return this.irq;
  }

  public void setIrq(long irq) {
    this.irq = irq;
    setIrqIsSet(true);
  }

  public void unsetIrq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IRQ_ISSET_ID);
  }

  /** Returns true if field irq is set (has been assigned a value) and false otherwise */
  public boolean isSetIrq() {
    return EncodingUtils.testBit(__isset_bitfield, __IRQ_ISSET_ID);
  }

  public void setIrqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IRQ_ISSET_ID, value);
  }

  public long getSoftirq() {
    return this.softirq;
  }

  public void setSoftirq(long softirq) {
    this.softirq = softirq;
    setSoftirqIsSet(true);
  }

  public void unsetSoftirq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOFTIRQ_ISSET_ID);
  }

  /** Returns true if field softirq is set (has been assigned a value) and false otherwise */
  public boolean isSetSoftirq() {
    return EncodingUtils.testBit(__isset_bitfield, __SOFTIRQ_ISSET_ID);
  }

  public void setSoftirqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOFTIRQ_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
      case PROCESSOR:
        if (value == null) {
          unsetProcessor();
        } else {
          setProcessor((String)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((Long)value);
        }
        break;

      case NICE:
        if (value == null) {
          unsetNice();
        } else {
          setNice((Long)value);
        }
        break;

      case SYSTEM:
        if (value == null) {
          unsetSystem();
        } else {
          setSystem((Long)value);
        }
        break;

      case IDLE:
        if (value == null) {
          unsetIdle();
        } else {
          setIdle((Long)value);
        }
        break;

      case IOWAIT:
        if (value == null) {
          unsetIowait();
        } else {
          setIowait((Long)value);
        }
        break;

      case IRQ:
        if (value == null) {
          unsetIrq();
        } else {
          setIrq((Long)value);
        }
        break;

      case SOFTIRQ:
        if (value == null) {
          unsetSoftirq();
        } else {
          setSoftirq((Long)value);
        }
        break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
      case PROCESSOR:
        return getProcessor();

      case USER:
        return Long.valueOf(getUser());

      case NICE:
        return Long.valueOf(getNice());

      case SYSTEM:
        return Long.valueOf(getSystem());

      case IDLE:
        return Long.valueOf(getIdle());

      case IOWAIT:
        return Long.valueOf(getIowait());

      case IRQ:
        return Long.valueOf(getIrq());

      case SOFTIRQ:
        return Long.valueOf(getSoftirq());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
      case PROCESSOR:
        return isSetProcessor();
      case USER:
        return isSetUser();
      case NICE:
        return isSetNice();
      case SYSTEM:
        return isSetSystem();
      case IDLE:
        return isSetIdle();
      case IOWAIT:
        return isSetIowait();
      case IRQ:
        return isSetIrq();
      case SOFTIRQ:
        return isSetSoftirq();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCpuInfoDynamic)
      return this.equals((TCpuInfoDynamic)that);
    return false;
  }

  public boolean equals(TCpuInfoDynamic that) {
    if (that == null)
      return false;

    boolean this_present_processor = true && this.isSetProcessor();
    boolean that_present_processor = true && that.isSetProcessor();
    if (this_present_processor || that_present_processor) {
      if (!(this_present_processor && that_present_processor))
        return false;
      if (!this.processor.equals(that.processor))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (this.user != that.user)
        return false;
    }

    boolean this_present_nice = true && this.isSetNice();
    boolean that_present_nice = true && that.isSetNice();
    if (this_present_nice || that_present_nice) {
      if (!(this_present_nice && that_present_nice))
        return false;
      if (this.nice != that.nice)
        return false;
    }

    boolean this_present_system = true && this.isSetSystem();
    boolean that_present_system = true && that.isSetSystem();
    if (this_present_system || that_present_system) {
      if (!(this_present_system && that_present_system))
        return false;
      if (this.system != that.system)
        return false;
    }

    boolean this_present_idle = true && this.isSetIdle();
    boolean that_present_idle = true && that.isSetIdle();
    if (this_present_idle || that_present_idle) {
      if (!(this_present_idle && that_present_idle))
        return false;
      if (this.idle != that.idle)
        return false;
    }

    boolean this_present_iowait = true && this.isSetIowait();
    boolean that_present_iowait = true && that.isSetIowait();
    if (this_present_iowait || that_present_iowait) {
      if (!(this_present_iowait && that_present_iowait))
        return false;
      if (this.iowait != that.iowait)
        return false;
    }

    boolean this_present_irq = true && this.isSetIrq();
    boolean that_present_irq = true && that.isSetIrq();
    if (this_present_irq || that_present_irq) {
      if (!(this_present_irq && that_present_irq))
        return false;
      if (this.irq != that.irq)
        return false;
    }

    boolean this_present_softirq = true && this.isSetSoftirq();
    boolean that_present_softirq = true && that.isSetSoftirq();
    if (this_present_softirq || that_present_softirq) {
      if (!(this_present_softirq && that_present_softirq))
        return false;
      if (this.softirq != that.softirq)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_processor = true && (isSetProcessor());
    list.add(present_processor);
    if (present_processor)
      list.add(processor);

    boolean present_user = true && (isSetUser());
    list.add(present_user);
    if (present_user)
      list.add(user);

    boolean present_nice = true && (isSetNice());
    list.add(present_nice);
    if (present_nice)
      list.add(nice);

    boolean present_system = true && (isSetSystem());
    list.add(present_system);
    if (present_system)
      list.add(system);

    boolean present_idle = true && (isSetIdle());
    list.add(present_idle);
    if (present_idle)
      list.add(idle);

    boolean present_iowait = true && (isSetIowait());
    list.add(present_iowait);
    if (present_iowait)
      list.add(iowait);

    boolean present_irq = true && (isSetIrq());
    list.add(present_irq);
    if (present_irq)
      list.add(irq);

    boolean present_softirq = true && (isSetSoftirq());
    list.add(present_softirq);
    if (present_softirq)
      list.add(softirq);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCpuInfoDynamic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProcessor()).compareTo(other.isSetProcessor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processor, other.processor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNice()).compareTo(other.isSetNice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nice, other.nice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystem()).compareTo(other.isSetSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.system, other.system);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdle()).compareTo(other.isSetIdle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idle, other.idle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIowait()).compareTo(other.isSetIowait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIowait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iowait, other.iowait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIrq()).compareTo(other.isSetIrq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIrq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.irq, other.irq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSoftirq()).compareTo(other.isSetSoftirq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSoftirq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.softirq, other.softirq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCpuInfoDynamic(");
    boolean first = true;

    if (isSetProcessor()) {
      sb.append("processor:");
      if (this.processor == null) {
        sb.append("null");
      } else {
        sb.append(this.processor);
      }
      first = false;
    }
    if (isSetUser()) {
      if (!first) sb.append(", ");
      sb.append("user:");
      sb.append(this.user);
      first = false;
    }
    if (isSetNice()) {
      if (!first) sb.append(", ");
      sb.append("nice:");
      sb.append(this.nice);
      first = false;
    }
    if (isSetSystem()) {
      if (!first) sb.append(", ");
      sb.append("system:");
      sb.append(this.system);
      first = false;
    }
    if (isSetIdle()) {
      if (!first) sb.append(", ");
      sb.append("idle:");
      sb.append(this.idle);
      first = false;
    }
    if (isSetIowait()) {
      if (!first) sb.append(", ");
      sb.append("iowait:");
      sb.append(this.iowait);
      first = false;
    }
    if (isSetIrq()) {
      if (!first) sb.append(", ");
      sb.append("irq:");
      sb.append(this.irq);
      first = false;
    }
    if (isSetSoftirq()) {
      if (!first) sb.append(", ");
      sb.append("softirq:");
      sb.append(this.softirq);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCpuInfoDynamicStandardSchemeFactory implements SchemeFactory {
    public TCpuInfoDynamicStandardScheme getScheme() {
      return new TCpuInfoDynamicStandardScheme();
    }
  }

  private static class TCpuInfoDynamicStandardScheme extends StandardScheme<TCpuInfoDynamic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCpuInfoDynamic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // PROCESSOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processor = iprot.readString();
              struct.setProcessorIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.user = iprot.readI64();
              struct.setUserIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.nice = iprot.readI64();
              struct.setNiceIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.system = iprot.readI64();
              struct.setSystemIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.idle = iprot.readI64();
              struct.setIdleIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IOWAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.iowait = iprot.readI64();
              struct.setIowaitIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IRQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.irq = iprot.readI64();
              struct.setIrqIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SOFTIRQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.softirq = iprot.readI64();
              struct.setSoftirqIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCpuInfoDynamic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.processor != null) {
        if (struct.isSetProcessor()) {
          oprot.writeFieldBegin(PROCESSOR_FIELD_DESC);
          oprot.writeString(struct.processor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUser()) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeI64(struct.user);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNice()) {
        oprot.writeFieldBegin(NICE_FIELD_DESC);
        oprot.writeI64(struct.nice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSystem()) {
        oprot.writeFieldBegin(SYSTEM_FIELD_DESC);
        oprot.writeI64(struct.system);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIdle()) {
        oprot.writeFieldBegin(IDLE_FIELD_DESC);
        oprot.writeI64(struct.idle);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIowait()) {
        oprot.writeFieldBegin(IOWAIT_FIELD_DESC);
        oprot.writeI64(struct.iowait);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIrq()) {
        oprot.writeFieldBegin(IRQ_FIELD_DESC);
        oprot.writeI64(struct.irq);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSoftirq()) {
        oprot.writeFieldBegin(SOFTIRQ_FIELD_DESC);
        oprot.writeI64(struct.softirq);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCpuInfoDynamicTupleSchemeFactory implements SchemeFactory {
    public TCpuInfoDynamicTupleScheme getScheme() {
      return new TCpuInfoDynamicTupleScheme();
    }
  }

  private static class TCpuInfoDynamicTupleScheme extends TupleScheme<TCpuInfoDynamic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCpuInfoDynamic struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProcessor()) {
        optionals.set(0);
      }
      if (struct.isSetUser()) {
        optionals.set(1);
      }
      if (struct.isSetNice()) {
        optionals.set(2);
      }
      if (struct.isSetSystem()) {
        optionals.set(3);
      }
      if (struct.isSetIdle()) {
        optionals.set(4);
      }
      if (struct.isSetIowait()) {
        optionals.set(5);
      }
      if (struct.isSetIrq()) {
        optionals.set(6);
      }
      if (struct.isSetSoftirq()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetProcessor()) {
        oprot.writeString(struct.processor);
      }
      if (struct.isSetUser()) {
        oprot.writeI64(struct.user);
      }
      if (struct.isSetNice()) {
        oprot.writeI64(struct.nice);
      }
      if (struct.isSetSystem()) {
        oprot.writeI64(struct.system);
      }
      if (struct.isSetIdle()) {
        oprot.writeI64(struct.idle);
      }
      if (struct.isSetIowait()) {
        oprot.writeI64(struct.iowait);
      }
      if (struct.isSetIrq()) {
        oprot.writeI64(struct.irq);
      }
      if (struct.isSetSoftirq()) {
        oprot.writeI64(struct.softirq);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCpuInfoDynamic struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.processor = iprot.readString();
        struct.setProcessorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.user = iprot.readI64();
        struct.setUserIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nice = iprot.readI64();
        struct.setNiceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.system = iprot.readI64();
        struct.setSystemIsSet(true);
      }
      if (incoming.get(4)) {
        struct.idle = iprot.readI64();
        struct.setIdleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.iowait = iprot.readI64();
        struct.setIowaitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.irq = iprot.readI64();
        struct.setIrqIsSet(true);
      }
      if (incoming.get(7)) {
        struct.softirq = iprot.readI64();
        struct.setSoftirqIsSet(true);
      }
    }
  }

}

