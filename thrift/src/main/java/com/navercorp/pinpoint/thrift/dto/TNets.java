/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.navercorp.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-13")
public class TNets implements org.apache.thrift.TBase<TNets, TNets._Fields>, java.io.Serializable, Cloneable, Comparable<TNets> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNets");

  private static final org.apache.thrift.protocol.TField T_NET_INFO_STATICS_FIELD_DESC = new org.apache.thrift.protocol.TField("tNetInfoStatics", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField T_NET_INFO_DYNAMICS_FIELD_DESC = new org.apache.thrift.protocol.TField("tNetInfoDynamics", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TNetsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TNetsTupleSchemeFactory());
  }

  private List<TNetInfoStatic> tNetInfoStatics; // required
  private List<TNetInfoDynamic> tNetInfoDynamics; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    T_NET_INFO_STATICS((short)1, "tNetInfoStatics"),
    T_NET_INFO_DYNAMICS((short)2, "tNetInfoDynamics");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // T_NET_INFO_STATICS
          return T_NET_INFO_STATICS;
        case 2: // T_NET_INFO_DYNAMICS
          return T_NET_INFO_DYNAMICS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.T_NET_INFO_STATICS, new org.apache.thrift.meta_data.FieldMetaData("tNetInfoStatics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNetInfoStatic.class))));
    tmpMap.put(_Fields.T_NET_INFO_DYNAMICS, new org.apache.thrift.meta_data.FieldMetaData("tNetInfoDynamics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNetInfoDynamic.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNets.class, metaDataMap);
  }

  public TNets() {
  }

  public TNets(
    List<TNetInfoStatic> tNetInfoStatics,
    List<TNetInfoDynamic> tNetInfoDynamics)
  {
    this();
    this.tNetInfoStatics = tNetInfoStatics;
    this.tNetInfoDynamics = tNetInfoDynamics;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNets(TNets other) {
    if (other.isSetTNetInfoStatics()) {
      List<TNetInfoStatic> __this__tNetInfoStatics = new ArrayList<TNetInfoStatic>(other.tNetInfoStatics.size());
      for (TNetInfoStatic other_element : other.tNetInfoStatics) {
        __this__tNetInfoStatics.add(new TNetInfoStatic(other_element));
      }
      this.tNetInfoStatics = __this__tNetInfoStatics;
    }
    if (other.isSetTNetInfoDynamics()) {
      List<TNetInfoDynamic> __this__tNetInfoDynamics = new ArrayList<TNetInfoDynamic>(other.tNetInfoDynamics.size());
      for (TNetInfoDynamic other_element : other.tNetInfoDynamics) {
        __this__tNetInfoDynamics.add(new TNetInfoDynamic(other_element));
      }
      this.tNetInfoDynamics = __this__tNetInfoDynamics;
    }
  }

  public TNets deepCopy() {
    return new TNets(this);
  }

  @Override
  public void clear() {
    this.tNetInfoStatics = null;
    this.tNetInfoDynamics = null;
  }

  public int getTNetInfoStaticsSize() {
    return (this.tNetInfoStatics == null) ? 0 : this.tNetInfoStatics.size();
  }

  public java.util.Iterator<TNetInfoStatic> getTNetInfoStaticsIterator() {
    return (this.tNetInfoStatics == null) ? null : this.tNetInfoStatics.iterator();
  }

  public void addToTNetInfoStatics(TNetInfoStatic elem) {
    if (this.tNetInfoStatics == null) {
      this.tNetInfoStatics = new ArrayList<TNetInfoStatic>();
    }
    this.tNetInfoStatics.add(elem);
  }

  public List<TNetInfoStatic> getTNetInfoStatics() {
    return this.tNetInfoStatics;
  }

  public void setTNetInfoStatics(List<TNetInfoStatic> tNetInfoStatics) {
    this.tNetInfoStatics = tNetInfoStatics;
  }

  public void unsetTNetInfoStatics() {
    this.tNetInfoStatics = null;
  }

  /** Returns true if field tNetInfoStatics is set (has been assigned a value) and false otherwise */
  public boolean isSetTNetInfoStatics() {
    return this.tNetInfoStatics != null;
  }

  public void setTNetInfoStaticsIsSet(boolean value) {
    if (!value) {
      this.tNetInfoStatics = null;
    }
  }

  public int getTNetInfoDynamicsSize() {
    return (this.tNetInfoDynamics == null) ? 0 : this.tNetInfoDynamics.size();
  }

  public java.util.Iterator<TNetInfoDynamic> getTNetInfoDynamicsIterator() {
    return (this.tNetInfoDynamics == null) ? null : this.tNetInfoDynamics.iterator();
  }

  public void addToTNetInfoDynamics(TNetInfoDynamic elem) {
    if (this.tNetInfoDynamics == null) {
      this.tNetInfoDynamics = new ArrayList<TNetInfoDynamic>();
    }
    this.tNetInfoDynamics.add(elem);
  }

  public List<TNetInfoDynamic> getTNetInfoDynamics() {
    return this.tNetInfoDynamics;
  }

  public void setTNetInfoDynamics(List<TNetInfoDynamic> tNetInfoDynamics) {
    this.tNetInfoDynamics = tNetInfoDynamics;
  }

  public void unsetTNetInfoDynamics() {
    this.tNetInfoDynamics = null;
  }

  /** Returns true if field tNetInfoDynamics is set (has been assigned a value) and false otherwise */
  public boolean isSetTNetInfoDynamics() {
    return this.tNetInfoDynamics != null;
  }

  public void setTNetInfoDynamicsIsSet(boolean value) {
    if (!value) {
      this.tNetInfoDynamics = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case T_NET_INFO_STATICS:
      if (value == null) {
        unsetTNetInfoStatics();
      } else {
        setTNetInfoStatics((List<TNetInfoStatic>)value);
      }
      break;

    case T_NET_INFO_DYNAMICS:
      if (value == null) {
        unsetTNetInfoDynamics();
      } else {
        setTNetInfoDynamics((List<TNetInfoDynamic>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case T_NET_INFO_STATICS:
      return getTNetInfoStatics();

    case T_NET_INFO_DYNAMICS:
      return getTNetInfoDynamics();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case T_NET_INFO_STATICS:
      return isSetTNetInfoStatics();
    case T_NET_INFO_DYNAMICS:
      return isSetTNetInfoDynamics();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TNets)
      return this.equals((TNets)that);
    return false;
  }

  public boolean equals(TNets that) {
    if (that == null)
      return false;

    boolean this_present_tNetInfoStatics = true && this.isSetTNetInfoStatics();
    boolean that_present_tNetInfoStatics = true && that.isSetTNetInfoStatics();
    if (this_present_tNetInfoStatics || that_present_tNetInfoStatics) {
      if (!(this_present_tNetInfoStatics && that_present_tNetInfoStatics))
        return false;
      if (!this.tNetInfoStatics.equals(that.tNetInfoStatics))
        return false;
    }

    boolean this_present_tNetInfoDynamics = true && this.isSetTNetInfoDynamics();
    boolean that_present_tNetInfoDynamics = true && that.isSetTNetInfoDynamics();
    if (this_present_tNetInfoDynamics || that_present_tNetInfoDynamics) {
      if (!(this_present_tNetInfoDynamics && that_present_tNetInfoDynamics))
        return false;
      if (!this.tNetInfoDynamics.equals(that.tNetInfoDynamics))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tNetInfoStatics = true && (isSetTNetInfoStatics());
    list.add(present_tNetInfoStatics);
    if (present_tNetInfoStatics)
      list.add(tNetInfoStatics);

    boolean present_tNetInfoDynamics = true && (isSetTNetInfoDynamics());
    list.add(present_tNetInfoDynamics);
    if (present_tNetInfoDynamics)
      list.add(tNetInfoDynamics);

    return list.hashCode();
  }

  @Override
  public int compareTo(TNets other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTNetInfoStatics()).compareTo(other.isSetTNetInfoStatics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTNetInfoStatics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tNetInfoStatics, other.tNetInfoStatics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTNetInfoDynamics()).compareTo(other.isSetTNetInfoDynamics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTNetInfoDynamics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tNetInfoDynamics, other.tNetInfoDynamics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TNets(");
    boolean first = true;

    sb.append("tNetInfoStatics:");
    if (this.tNetInfoStatics == null) {
      sb.append("null");
    } else {
      sb.append(this.tNetInfoStatics);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tNetInfoDynamics:");
    if (this.tNetInfoDynamics == null) {
      sb.append("null");
    } else {
      sb.append(this.tNetInfoDynamics);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNetsStandardSchemeFactory implements SchemeFactory {
    public TNetsStandardScheme getScheme() {
      return new TNetsStandardScheme();
    }
  }

  private static class TNetsStandardScheme extends StandardScheme<TNets> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TNets struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // T_NET_INFO_STATICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.tNetInfoStatics = new ArrayList<TNetInfoStatic>(_list40.size);
                TNetInfoStatic _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new TNetInfoStatic();
                  _elem41.read(iprot);
                  struct.tNetInfoStatics.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setTNetInfoStaticsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // T_NET_INFO_DYNAMICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.tNetInfoDynamics = new ArrayList<TNetInfoDynamic>(_list43.size);
                TNetInfoDynamic _elem44;
                for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                {
                  _elem44 = new TNetInfoDynamic();
                  _elem44.read(iprot);
                  struct.tNetInfoDynamics.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setTNetInfoDynamicsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TNets struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tNetInfoStatics != null) {
        oprot.writeFieldBegin(T_NET_INFO_STATICS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tNetInfoStatics.size()));
          for (TNetInfoStatic _iter46 : struct.tNetInfoStatics)
          {
            _iter46.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tNetInfoDynamics != null) {
        oprot.writeFieldBegin(T_NET_INFO_DYNAMICS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tNetInfoDynamics.size()));
          for (TNetInfoDynamic _iter47 : struct.tNetInfoDynamics)
          {
            _iter47.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNetsTupleSchemeFactory implements SchemeFactory {
    public TNetsTupleScheme getScheme() {
      return new TNetsTupleScheme();
    }
  }

  private static class TNetsTupleScheme extends TupleScheme<TNets> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNets struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTNetInfoStatics()) {
        optionals.set(0);
      }
      if (struct.isSetTNetInfoDynamics()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTNetInfoStatics()) {
        {
          oprot.writeI32(struct.tNetInfoStatics.size());
          for (TNetInfoStatic _iter48 : struct.tNetInfoStatics)
          {
            _iter48.write(oprot);
          }
        }
      }
      if (struct.isSetTNetInfoDynamics()) {
        {
          oprot.writeI32(struct.tNetInfoDynamics.size());
          for (TNetInfoDynamic _iter49 : struct.tNetInfoDynamics)
          {
            _iter49.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNets struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tNetInfoStatics = new ArrayList<TNetInfoStatic>(_list50.size);
          TNetInfoStatic _elem51;
          for (int _i52 = 0; _i52 < _list50.size; ++_i52)
          {
            _elem51 = new TNetInfoStatic();
            _elem51.read(iprot);
            struct.tNetInfoStatics.add(_elem51);
          }
        }
        struct.setTNetInfoStaticsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tNetInfoDynamics = new ArrayList<TNetInfoDynamic>(_list53.size);
          TNetInfoDynamic _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new TNetInfoDynamic();
            _elem54.read(iprot);
            struct.tNetInfoDynamics.add(_elem54);
          }
        }
        struct.setTNetInfoDynamicsIsSet(true);
      }
    }
  }

}

