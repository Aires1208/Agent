/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.navercorp.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-14")
public class TCpuInfoStatic implements org.apache.thrift.TBase<TCpuInfoStatic, TCpuInfoStatic._Fields>, java.io.Serializable, Cloneable, Comparable<TCpuInfoStatic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCpuInfoStatic");

  private static final org.apache.thrift.protocol.TField PROCESSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("processor", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VENDOR_FIELD_DESC = new org.apache.thrift.protocol.TField("vendor", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CPU_FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuFamily", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MODEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("modelName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CPU_MHZ_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuMHz", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CACHE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheSize", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCpuInfoStaticStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCpuInfoStaticTupleSchemeFactory());
  }

  private String processor; // optional
  private String vendor; // optional
  private String cpuFamily; // optional
  private String model; // optional
  private String modelName; // optional
  private String cpuMHz; // optional
  private String cacheSize; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROCESSOR((short)1, "processor"),
    VENDOR((short)2, "vendor"),
    CPU_FAMILY((short)3, "cpuFamily"),
    MODEL((short)4, "model"),
    MODEL_NAME((short)5, "modelName"),
    CPU_MHZ((short)6, "cpuMHz"),
    CACHE_SIZE((short)7, "cacheSize");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROCESSOR
          return PROCESSOR;
        case 2: // VENDOR
          return VENDOR;
        case 3: // CPU_FAMILY
          return CPU_FAMILY;
        case 4: // MODEL
          return MODEL;
        case 5: // MODEL_NAME
          return MODEL_NAME;
        case 6: // CPU_MHZ
          return CPU_MHZ;
        case 7: // CACHE_SIZE
          return CACHE_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PROCESSOR,_Fields.VENDOR,_Fields.CPU_FAMILY,_Fields.MODEL,_Fields.MODEL_NAME,_Fields.CPU_MHZ,_Fields.CACHE_SIZE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROCESSOR, new org.apache.thrift.meta_data.FieldMetaData("processor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VENDOR, new org.apache.thrift.meta_data.FieldMetaData("vendor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU_FAMILY, new org.apache.thrift.meta_data.FieldMetaData("cpuFamily", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("modelName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU_MHZ, new org.apache.thrift.meta_data.FieldMetaData("cpuMHz", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CACHE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("cacheSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCpuInfoStatic.class, metaDataMap);
  }

  public TCpuInfoStatic() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCpuInfoStatic(TCpuInfoStatic other) {
    if (other.isSetProcessor()) {
      this.processor = other.processor;
    }
    if (other.isSetVendor()) {
      this.vendor = other.vendor;
    }
    if (other.isSetCpuFamily()) {
      this.cpuFamily = other.cpuFamily;
    }
    if (other.isSetModel()) {
      this.model = other.model;
    }
    if (other.isSetModelName()) {
      this.modelName = other.modelName;
    }
    if (other.isSetCpuMHz()) {
      this.cpuMHz = other.cpuMHz;
    }
    if (other.isSetCacheSize()) {
      this.cacheSize = other.cacheSize;
    }
  }

  public TCpuInfoStatic deepCopy() {
    return new TCpuInfoStatic(this);
  }

  @Override
  public void clear() {
    this.processor = null;
    this.vendor = null;
    this.cpuFamily = null;
    this.model = null;
    this.modelName = null;
    this.cpuMHz = null;
    this.cacheSize = null;
  }

  public String getProcessor() {
    return this.processor;
  }

  public void setProcessor(String processor) {
    this.processor = processor;
  }

  public void unsetProcessor() {
    this.processor = null;
  }

  /** Returns true if field processor is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessor() {
    return this.processor != null;
  }

  public void setProcessorIsSet(boolean value) {
    if (!value) {
      this.processor = null;
    }
  }

  public String getVendor() {
    return this.vendor;
  }

  public void setVendor(String vendor) {
    this.vendor = vendor;
  }

  public void unsetVendor() {
    this.vendor = null;
  }

  /** Returns true if field vendor is set (has been assigned a value) and false otherwise */
  public boolean isSetVendor() {
    return this.vendor != null;
  }

  public void setVendorIsSet(boolean value) {
    if (!value) {
      this.vendor = null;
    }
  }

  public String getCpuFamily() {
    return this.cpuFamily;
  }

  public void setCpuFamily(String cpuFamily) {
    this.cpuFamily = cpuFamily;
  }

  public void unsetCpuFamily() {
    this.cpuFamily = null;
  }

  /** Returns true if field cpuFamily is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuFamily() {
    return this.cpuFamily != null;
  }

  public void setCpuFamilyIsSet(boolean value) {
    if (!value) {
      this.cpuFamily = null;
    }
  }

  public String getModel() {
    return this.model;
  }

  public void setModel(String model) {
    this.model = model;
  }

  public void unsetModel() {
    this.model = null;
  }

  /** Returns true if field model is set (has been assigned a value) and false otherwise */
  public boolean isSetModel() {
    return this.model != null;
  }

  public void setModelIsSet(boolean value) {
    if (!value) {
      this.model = null;
    }
  }

  public String getModelName() {
    return this.modelName;
  }

  public void setModelName(String modelName) {
    this.modelName = modelName;
  }

  public void unsetModelName() {
    this.modelName = null;
  }

  /** Returns true if field modelName is set (has been assigned a value) and false otherwise */
  public boolean isSetModelName() {
    return this.modelName != null;
  }

  public void setModelNameIsSet(boolean value) {
    if (!value) {
      this.modelName = null;
    }
  }

  public String getCpuMHz() {
    return this.cpuMHz;
  }

  public void setCpuMHz(String cpuMHz) {
    this.cpuMHz = cpuMHz;
  }

  public void unsetCpuMHz() {
    this.cpuMHz = null;
  }

  /** Returns true if field cpuMHz is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuMHz() {
    return this.cpuMHz != null;
  }

  public void setCpuMHzIsSet(boolean value) {
    if (!value) {
      this.cpuMHz = null;
    }
  }

  public String getCacheSize() {
    return this.cacheSize;
  }

  public void setCacheSize(String cacheSize) {
    this.cacheSize = cacheSize;
  }

  public void unsetCacheSize() {
    this.cacheSize = null;
  }

  /** Returns true if field cacheSize is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheSize() {
    return this.cacheSize != null;
  }

  public void setCacheSizeIsSet(boolean value) {
    if (!value) {
      this.cacheSize = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROCESSOR:
      if (value == null) {
        unsetProcessor();
      } else {
        setProcessor((String)value);
      }
      break;

    case VENDOR:
      if (value == null) {
        unsetVendor();
      } else {
        setVendor((String)value);
      }
      break;

    case CPU_FAMILY:
      if (value == null) {
        unsetCpuFamily();
      } else {
        setCpuFamily((String)value);
      }
      break;

    case MODEL:
      if (value == null) {
        unsetModel();
      } else {
        setModel((String)value);
      }
      break;

    case MODEL_NAME:
      if (value == null) {
        unsetModelName();
      } else {
        setModelName((String)value);
      }
      break;

    case CPU_MHZ:
      if (value == null) {
        unsetCpuMHz();
      } else {
        setCpuMHz((String)value);
      }
      break;

    case CACHE_SIZE:
      if (value == null) {
        unsetCacheSize();
      } else {
        setCacheSize((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROCESSOR:
      return getProcessor();

    case VENDOR:
      return getVendor();

    case CPU_FAMILY:
      return getCpuFamily();

    case MODEL:
      return getModel();

    case MODEL_NAME:
      return getModelName();

    case CPU_MHZ:
      return getCpuMHz();

    case CACHE_SIZE:
      return getCacheSize();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROCESSOR:
      return isSetProcessor();
    case VENDOR:
      return isSetVendor();
    case CPU_FAMILY:
      return isSetCpuFamily();
    case MODEL:
      return isSetModel();
    case MODEL_NAME:
      return isSetModelName();
    case CPU_MHZ:
      return isSetCpuMHz();
    case CACHE_SIZE:
      return isSetCacheSize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCpuInfoStatic)
      return this.equals((TCpuInfoStatic)that);
    return false;
  }

  public boolean equals(TCpuInfoStatic that) {
    if (that == null)
      return false;

    boolean this_present_processor = true && this.isSetProcessor();
    boolean that_present_processor = true && that.isSetProcessor();
    if (this_present_processor || that_present_processor) {
      if (!(this_present_processor && that_present_processor))
        return false;
      if (!this.processor.equals(that.processor))
        return false;
    }

    boolean this_present_vendor = true && this.isSetVendor();
    boolean that_present_vendor = true && that.isSetVendor();
    if (this_present_vendor || that_present_vendor) {
      if (!(this_present_vendor && that_present_vendor))
        return false;
      if (!this.vendor.equals(that.vendor))
        return false;
    }

    boolean this_present_cpuFamily = true && this.isSetCpuFamily();
    boolean that_present_cpuFamily = true && that.isSetCpuFamily();
    if (this_present_cpuFamily || that_present_cpuFamily) {
      if (!(this_present_cpuFamily && that_present_cpuFamily))
        return false;
      if (!this.cpuFamily.equals(that.cpuFamily))
        return false;
    }

    boolean this_present_model = true && this.isSetModel();
    boolean that_present_model = true && that.isSetModel();
    if (this_present_model || that_present_model) {
      if (!(this_present_model && that_present_model))
        return false;
      if (!this.model.equals(that.model))
        return false;
    }

    boolean this_present_modelName = true && this.isSetModelName();
    boolean that_present_modelName = true && that.isSetModelName();
    if (this_present_modelName || that_present_modelName) {
      if (!(this_present_modelName && that_present_modelName))
        return false;
      if (!this.modelName.equals(that.modelName))
        return false;
    }

    boolean this_present_cpuMHz = true && this.isSetCpuMHz();
    boolean that_present_cpuMHz = true && that.isSetCpuMHz();
    if (this_present_cpuMHz || that_present_cpuMHz) {
      if (!(this_present_cpuMHz && that_present_cpuMHz))
        return false;
      if (!this.cpuMHz.equals(that.cpuMHz))
        return false;
    }

    boolean this_present_cacheSize = true && this.isSetCacheSize();
    boolean that_present_cacheSize = true && that.isSetCacheSize();
    if (this_present_cacheSize || that_present_cacheSize) {
      if (!(this_present_cacheSize && that_present_cacheSize))
        return false;
      if (!this.cacheSize.equals(that.cacheSize))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_processor = true && (isSetProcessor());
    list.add(present_processor);
    if (present_processor)
      list.add(processor);

    boolean present_vendor = true && (isSetVendor());
    list.add(present_vendor);
    if (present_vendor)
      list.add(vendor);

    boolean present_cpuFamily = true && (isSetCpuFamily());
    list.add(present_cpuFamily);
    if (present_cpuFamily)
      list.add(cpuFamily);

    boolean present_model = true && (isSetModel());
    list.add(present_model);
    if (present_model)
      list.add(model);

    boolean present_modelName = true && (isSetModelName());
    list.add(present_modelName);
    if (present_modelName)
      list.add(modelName);

    boolean present_cpuMHz = true && (isSetCpuMHz());
    list.add(present_cpuMHz);
    if (present_cpuMHz)
      list.add(cpuMHz);

    boolean present_cacheSize = true && (isSetCacheSize());
    list.add(present_cacheSize);
    if (present_cacheSize)
      list.add(cacheSize);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCpuInfoStatic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProcessor()).compareTo(other.isSetProcessor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processor, other.processor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVendor()).compareTo(other.isSetVendor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVendor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vendor, other.vendor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuFamily()).compareTo(other.isSetCpuFamily());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuFamily()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuFamily, other.cpuFamily);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModel()).compareTo(other.isSetModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, other.model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelName()).compareTo(other.isSetModelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelName, other.modelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuMHz()).compareTo(other.isSetCpuMHz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuMHz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuMHz, other.cpuMHz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCacheSize()).compareTo(other.isSetCacheSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheSize, other.cacheSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCpuInfoStatic(");
    boolean first = true;

    if (isSetProcessor()) {
      sb.append("processor:");
      if (this.processor == null) {
        sb.append("null");
      } else {
        sb.append(this.processor);
      }
      first = false;
    }
    if (isSetVendor()) {
      if (!first) sb.append(", ");
      sb.append("vendor:");
      if (this.vendor == null) {
        sb.append("null");
      } else {
        sb.append(this.vendor);
      }
      first = false;
    }
    if (isSetCpuFamily()) {
      if (!first) sb.append(", ");
      sb.append("cpuFamily:");
      if (this.cpuFamily == null) {
        sb.append("null");
      } else {
        sb.append(this.cpuFamily);
      }
      first = false;
    }
    if (isSetModel()) {
      if (!first) sb.append(", ");
      sb.append("model:");
      if (this.model == null) {
        sb.append("null");
      } else {
        sb.append(this.model);
      }
      first = false;
    }
    if (isSetModelName()) {
      if (!first) sb.append(", ");
      sb.append("modelName:");
      if (this.modelName == null) {
        sb.append("null");
      } else {
        sb.append(this.modelName);
      }
      first = false;
    }
    if (isSetCpuMHz()) {
      if (!first) sb.append(", ");
      sb.append("cpuMHz:");
      if (this.cpuMHz == null) {
        sb.append("null");
      } else {
        sb.append(this.cpuMHz);
      }
      first = false;
    }
    if (isSetCacheSize()) {
      if (!first) sb.append(", ");
      sb.append("cacheSize:");
      if (this.cacheSize == null) {
        sb.append("null");
      } else {
        sb.append(this.cacheSize);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCpuInfoStaticStandardSchemeFactory implements SchemeFactory {
    public TCpuInfoStaticStandardScheme getScheme() {
      return new TCpuInfoStaticStandardScheme();
    }
  }

  private static class TCpuInfoStaticStandardScheme extends StandardScheme<TCpuInfoStatic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCpuInfoStatic struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROCESSOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processor = iprot.readString();
              struct.setProcessorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VENDOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vendor = iprot.readString();
              struct.setVendorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CPU_FAMILY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpuFamily = iprot.readString();
              struct.setCpuFamilyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.model = iprot.readString();
              struct.setModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MODEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelName = iprot.readString();
              struct.setModelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CPU_MHZ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpuMHz = iprot.readString();
              struct.setCpuMHzIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CACHE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cacheSize = iprot.readString();
              struct.setCacheSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCpuInfoStatic struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.processor != null) {
        if (struct.isSetProcessor()) {
          oprot.writeFieldBegin(PROCESSOR_FIELD_DESC);
          oprot.writeString(struct.processor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.vendor != null) {
        if (struct.isSetVendor()) {
          oprot.writeFieldBegin(VENDOR_FIELD_DESC);
          oprot.writeString(struct.vendor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpuFamily != null) {
        if (struct.isSetCpuFamily()) {
          oprot.writeFieldBegin(CPU_FAMILY_FIELD_DESC);
          oprot.writeString(struct.cpuFamily);
          oprot.writeFieldEnd();
        }
      }
      if (struct.model != null) {
        if (struct.isSetModel()) {
          oprot.writeFieldBegin(MODEL_FIELD_DESC);
          oprot.writeString(struct.model);
          oprot.writeFieldEnd();
        }
      }
      if (struct.modelName != null) {
        if (struct.isSetModelName()) {
          oprot.writeFieldBegin(MODEL_NAME_FIELD_DESC);
          oprot.writeString(struct.modelName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpuMHz != null) {
        if (struct.isSetCpuMHz()) {
          oprot.writeFieldBegin(CPU_MHZ_FIELD_DESC);
          oprot.writeString(struct.cpuMHz);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cacheSize != null) {
        if (struct.isSetCacheSize()) {
          oprot.writeFieldBegin(CACHE_SIZE_FIELD_DESC);
          oprot.writeString(struct.cacheSize);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCpuInfoStaticTupleSchemeFactory implements SchemeFactory {
    public TCpuInfoStaticTupleScheme getScheme() {
      return new TCpuInfoStaticTupleScheme();
    }
  }

  private static class TCpuInfoStaticTupleScheme extends TupleScheme<TCpuInfoStatic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCpuInfoStatic struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProcessor()) {
        optionals.set(0);
      }
      if (struct.isSetVendor()) {
        optionals.set(1);
      }
      if (struct.isSetCpuFamily()) {
        optionals.set(2);
      }
      if (struct.isSetModel()) {
        optionals.set(3);
      }
      if (struct.isSetModelName()) {
        optionals.set(4);
      }
      if (struct.isSetCpuMHz()) {
        optionals.set(5);
      }
      if (struct.isSetCacheSize()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetProcessor()) {
        oprot.writeString(struct.processor);
      }
      if (struct.isSetVendor()) {
        oprot.writeString(struct.vendor);
      }
      if (struct.isSetCpuFamily()) {
        oprot.writeString(struct.cpuFamily);
      }
      if (struct.isSetModel()) {
        oprot.writeString(struct.model);
      }
      if (struct.isSetModelName()) {
        oprot.writeString(struct.modelName);
      }
      if (struct.isSetCpuMHz()) {
        oprot.writeString(struct.cpuMHz);
      }
      if (struct.isSetCacheSize()) {
        oprot.writeString(struct.cacheSize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCpuInfoStatic struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.processor = iprot.readString();
        struct.setProcessorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.vendor = iprot.readString();
        struct.setVendorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cpuFamily = iprot.readString();
        struct.setCpuFamilyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.model = iprot.readString();
        struct.setModelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.modelName = iprot.readString();
        struct.setModelNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cpuMHz = iprot.readString();
        struct.setCpuMHzIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cacheSize = iprot.readString();
        struct.setCacheSizeIsSet(true);
      }
    }
  }

}

