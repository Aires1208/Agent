/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.navercorp.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-13")
public class TNetInfoStatic implements org.apache.thrift.TBase<TNetInfoStatic, TNetInfoStatic._Fields>, java.io.Serializable, Cloneable, Comparable<TNetInfoStatic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNetInfoStatic");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField V4_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("v4Address", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MAC_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("macAddress", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MTU_FIELD_DESC = new org.apache.thrift.protocol.TField("mtu", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TNetInfoStaticStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TNetInfoStaticTupleSchemeFactory());
  }

  private String name; // optional
  private String v4Address; // optional
  private String macAddress; // optional
  private long mtu; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    V4_ADDRESS((short)2, "v4Address"),
    MAC_ADDRESS((short)3, "macAddress"),
    MTU((short)4, "mtu");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // V4_ADDRESS
          return V4_ADDRESS;
        case 3: // MAC_ADDRESS
          return MAC_ADDRESS;
        case 4: // MTU
          return MTU;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MTU_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.V4_ADDRESS,_Fields.MAC_ADDRESS,_Fields.MTU};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.V4_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("v4Address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAC_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("macAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MTU, new org.apache.thrift.meta_data.FieldMetaData("mtu", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNetInfoStatic.class, metaDataMap);
  }

  public TNetInfoStatic() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNetInfoStatic(TNetInfoStatic other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetV4Address()) {
      this.v4Address = other.v4Address;
    }
    if (other.isSetMacAddress()) {
      this.macAddress = other.macAddress;
    }
    this.mtu = other.mtu;
  }

  public TNetInfoStatic deepCopy() {
    return new TNetInfoStatic(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.v4Address = null;
    this.macAddress = null;
    setMtuIsSet(false);
    this.mtu = 0;
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getV4Address() {
    return this.v4Address;
  }

  public void setV4Address(String v4Address) {
    this.v4Address = v4Address;
  }

  public void unsetV4Address() {
    this.v4Address = null;
  }

  /** Returns true if field v4Address is set (has been assigned a value) and false otherwise */
  public boolean isSetV4Address() {
    return this.v4Address != null;
  }

  public void setV4AddressIsSet(boolean value) {
    if (!value) {
      this.v4Address = null;
    }
  }

  public String getMacAddress() {
    return this.macAddress;
  }

  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }

  public void unsetMacAddress() {
    this.macAddress = null;
  }

  /** Returns true if field macAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetMacAddress() {
    return this.macAddress != null;
  }

  public void setMacAddressIsSet(boolean value) {
    if (!value) {
      this.macAddress = null;
    }
  }

  public long getMtu() {
    return this.mtu;
  }

  public void setMtu(long mtu) {
    this.mtu = mtu;
    setMtuIsSet(true);
  }

  public void unsetMtu() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MTU_ISSET_ID);
  }

  /** Returns true if field mtu is set (has been assigned a value) and false otherwise */
  public boolean isSetMtu() {
    return EncodingUtils.testBit(__isset_bitfield, __MTU_ISSET_ID);
  }

  public void setMtuIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MTU_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case V4_ADDRESS:
      if (value == null) {
        unsetV4Address();
      } else {
        setV4Address((String)value);
      }
      break;

    case MAC_ADDRESS:
      if (value == null) {
        unsetMacAddress();
      } else {
        setMacAddress((String)value);
      }
      break;

    case MTU:
      if (value == null) {
        unsetMtu();
      } else {
        setMtu((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case V4_ADDRESS:
      return getV4Address();

    case MAC_ADDRESS:
      return getMacAddress();

    case MTU:
      return Long.valueOf(getMtu());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case V4_ADDRESS:
      return isSetV4Address();
    case MAC_ADDRESS:
      return isSetMacAddress();
    case MTU:
      return isSetMtu();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TNetInfoStatic)
      return this.equals((TNetInfoStatic)that);
    return false;
  }

  public boolean equals(TNetInfoStatic that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_v4Address = true && this.isSetV4Address();
    boolean that_present_v4Address = true && that.isSetV4Address();
    if (this_present_v4Address || that_present_v4Address) {
      if (!(this_present_v4Address && that_present_v4Address))
        return false;
      if (!this.v4Address.equals(that.v4Address))
        return false;
    }

    boolean this_present_macAddress = true && this.isSetMacAddress();
    boolean that_present_macAddress = true && that.isSetMacAddress();
    if (this_present_macAddress || that_present_macAddress) {
      if (!(this_present_macAddress && that_present_macAddress))
        return false;
      if (!this.macAddress.equals(that.macAddress))
        return false;
    }

    boolean this_present_mtu = true && this.isSetMtu();
    boolean that_present_mtu = true && that.isSetMtu();
    if (this_present_mtu || that_present_mtu) {
      if (!(this_present_mtu && that_present_mtu))
        return false;
      if (this.mtu != that.mtu)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_v4Address = true && (isSetV4Address());
    list.add(present_v4Address);
    if (present_v4Address)
      list.add(v4Address);

    boolean present_macAddress = true && (isSetMacAddress());
    list.add(present_macAddress);
    if (present_macAddress)
      list.add(macAddress);

    boolean present_mtu = true && (isSetMtu());
    list.add(present_mtu);
    if (present_mtu)
      list.add(mtu);

    return list.hashCode();
  }

  @Override
  public int compareTo(TNetInfoStatic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetV4Address()).compareTo(other.isSetV4Address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetV4Address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v4Address, other.v4Address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMacAddress()).compareTo(other.isSetMacAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMacAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macAddress, other.macAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMtu()).compareTo(other.isSetMtu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMtu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mtu, other.mtu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TNetInfoStatic(");
    boolean first = true;

    if (isSetName()) {
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetV4Address()) {
      if (!first) sb.append(", ");
      sb.append("v4Address:");
      if (this.v4Address == null) {
        sb.append("null");
      } else {
        sb.append(this.v4Address);
      }
      first = false;
    }
    if (isSetMacAddress()) {
      if (!first) sb.append(", ");
      sb.append("macAddress:");
      if (this.macAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.macAddress);
      }
      first = false;
    }
    if (isSetMtu()) {
      if (!first) sb.append(", ");
      sb.append("mtu:");
      sb.append(this.mtu);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNetInfoStaticStandardSchemeFactory implements SchemeFactory {
    public TNetInfoStaticStandardScheme getScheme() {
      return new TNetInfoStaticStandardScheme();
    }
  }

  private static class TNetInfoStaticStandardScheme extends StandardScheme<TNetInfoStatic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TNetInfoStatic struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // V4_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.v4Address = iprot.readString();
              struct.setV4AddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAC_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.macAddress = iprot.readString();
              struct.setMacAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MTU
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mtu = iprot.readI64();
              struct.setMtuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TNetInfoStatic struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.v4Address != null) {
        if (struct.isSetV4Address()) {
          oprot.writeFieldBegin(V4_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.v4Address);
          oprot.writeFieldEnd();
        }
      }
      if (struct.macAddress != null) {
        if (struct.isSetMacAddress()) {
          oprot.writeFieldBegin(MAC_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.macAddress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMtu()) {
        oprot.writeFieldBegin(MTU_FIELD_DESC);
        oprot.writeI64(struct.mtu);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNetInfoStaticTupleSchemeFactory implements SchemeFactory {
    public TNetInfoStaticTupleScheme getScheme() {
      return new TNetInfoStaticTupleScheme();
    }
  }

  private static class TNetInfoStaticTupleScheme extends TupleScheme<TNetInfoStatic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNetInfoStatic struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetV4Address()) {
        optionals.set(1);
      }
      if (struct.isSetMacAddress()) {
        optionals.set(2);
      }
      if (struct.isSetMtu()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetV4Address()) {
        oprot.writeString(struct.v4Address);
      }
      if (struct.isSetMacAddress()) {
        oprot.writeString(struct.macAddress);
      }
      if (struct.isSetMtu()) {
        oprot.writeI64(struct.mtu);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNetInfoStatic struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.v4Address = iprot.readString();
        struct.setV4AddressIsSet(true);
      }
      if (incoming.get(2)) {
        struct.macAddress = iprot.readString();
        struct.setMacAddressIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mtu = iprot.readI64();
        struct.setMtuIsSet(true);
      }
    }
  }

}

